#!/bin/bash

set -eu

PROG_NAME=$(basename "$0")
FULL_PATH=$(dirname "$(realpath "$0")")
JUDGE_FILEPATH="/etc/dnsmasq.toggle/youtube.conf"

CRON_API_URL="https://api.github.com/repos/noraworld/cron-conf/contents/raspberrypi/non_root.cron"
PRIVATE_CRON_API_URL="https://api.github.com/repos/noraworld/envsman/contents/raspberrypi/cron-conf/private/non_root.cron"

CRON_FILE="$FULL_PATH/../raspberrypi/non_root.cron"
PRIVATE_CRON_FILE="$FULL_PATH/../raspberrypi/private/non_root.cron"

ROOT_CRON_API_URL="https://api.github.com/repos/noraworld/cron-conf/contents/raspberrypi/root.cron"
PRIVATE_ROOT_CRON_API_URL="https://api.github.com/repos/noraworld/envsman/contents/raspberrypi/cron-conf/private/root.cron"

ROOT_CRON_FILE="$FULL_PATH/../raspberrypi/root.cron"
PRIVATE_ROOT_CRON_FILE="$FULL_PATH/../raspberrypi/private/root.cron"

main() {
  validate
  judge

  local_cron_conf="$(print_conf "$CRON_FILE" "$PRIVATE_CRON_FILE" "NON_ROOT")"
  local_root_cron_conf="$(print_conf "$ROOT_CRON_FILE" "$PRIVATE_ROOT_CRON_FILE" "ROOT")"

  remote_cron_conf="$(print_conf_remote $CRON_API_URL $PRIVATE_CRON_API_URL "NON_ROOT")"
  remote_root_cron_conf="$(print_conf_remote $ROOT_CRON_API_URL $PRIVATE_ROOT_CRON_API_URL "ROOT")"

  if [ "$(diff <(echo "$remote_cron_conf") <(echo "$local_cron_conf"))" = "" ]; then
    echo "$local_cron_conf" | crontab
  else
    echo "$PROG_NAME: Local cron conf and remote cron conf did not match" >&2
    exit 4
  fi

  if [ "$(diff <(echo "$remote_root_cron_conf") <(echo "$local_root_cron_conf"))" = "" ]; then
    echo "$local_root_cron_conf" | sudo crontab
  else
    echo "$PROG_NAME: Local root cron conf and remote root cron conf did not match" >&2
    exit 4
  fi

  check_failed=false
  check "$local_cron_conf" "$(crontab -l)"
  check "$local_root_cron_conf" "$(sudo crontab -l)"
  if $check_failed; then
    exit 3
  fi

  print_crontab
}

validate() {
  if [ "$(whoami)" = "root" ]; then
    echo "$PROG_NAME: It should be run as a non-root user" >&2
    exit 1
  fi
}

judge() {
  if [ -e "$JUDGE_FILEPATH" ]; then
    echo   "$PROG_NAME: Failed to apply cron configurations because \"$JUDGE_FILEPATH\" exists"                                                   >&2
    printf "%${#PROG_NAME}s  It can be used only when \"$JUDGE_FILEPATH\" does not exist\n"                                                       >&2
    printf "%${#PROG_NAME}s  But you should not delete it manually because this behavior is to make it difficult to change cron configurations\n" >&2
    exit 2
  fi

  # TODO: implement additional feature so that it can be only executed via cron
}

check() {
  if [ "$(diff <(echo "$1") <(echo "$2"))" != "" ]; then
    echo "$PROG_NAME: It looks like something went wrong" >&2
    echo >&2
    echo "The diff shows here:" >&2
    diff <(echo "$1") <(echo "$2") >&2
    check_failed=true
  fi
}

# This should be performed only once
# because the limit of GitHub API requests exceeds
# if they are called too many
print_conf_remote() {
  echo "##### BEGIN $3 PUBLIC CRON CONF #####"
  curl "$(gh api "$1" --jq .download_url)"
  echo "##### END $3 PUBLIC CRON CONF #####"
  echo
  echo
  echo
  echo "##### BEGIN $3 PRIVATE CRON CONF #####"
  curl "$(gh api "$2" --jq .download_url)"
  echo "##### END $3 PRIVATE CRON CONF #####"
}

print_conf() {
  echo "##### BEGIN $3 PUBLIC CRON CONF #####"
  cat "$1"
  echo "##### END $3 PUBLIC CRON CONF #####"
  echo
  echo
  echo
  echo "##### BEGIN $3 PRIVATE CRON CONF #####"
  cat "$2"
  echo "##### END $3 PRIVATE CRON CONF #####"
}

print_crontab() {
  printf "\n\n\n"
  crontab -l
  printf "\n\n\n"
  sudo crontab -l
}

main "$@"
