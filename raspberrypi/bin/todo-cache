#!/bin/sh

set -eu
export GHC_FROM="$(basename "$0") $*"

CACHE_BASE_PATH="/home/ubuntu/.tmp/todo_caches"
CHECK_INTERVAL="3600"
ISSUE_NUMBER_LIST_FILE="/home/ubuntu/.tmp/todo_caches/issue_number_list"

main() {
  setup "$@"

  issue_number=$(get_issue_number "$@")
  filepath="$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')/$DATE"

  if [ -e "$filepath" ] && [ "$(echo $(( $(date '+%s') - $(cat "$filepath" | awk 'NR == 2') )) )" -lt "$CHECK_INTERVAL" ] && [ "$FORCE" != "1" ]; then
    [ "$DEBUG" = "1" ] && echo "info: cache found!" >&2
    tail -n +4 "$filepath"
  else
    [ "$DEBUG" = "1" ] && echo "info: cache is either not found, stale, or disabled" >&2
    content=$(ghc issue view --repo "$REPO" "$issue_number" --json body --jq .body)
    printf "%s\n" "---" "$(date '+%s')" "---" "$content" > "$filepath"
    tail -n +4 "$filepath"
  fi
}

get_issue_number() {
  if ! [ -e "$ISSUE_NUMBER_LIST_FILE" ]; then
    [ "$DEBUG" = "1" ] && echo "info: $ISSUE_NUMBER_LIST_FILE not found" >&2
    ghc issue list --repo "$REPO" --state "all" | grep -E "$DATE" | awk '{ print $1 }'
    return
  fi

  base_date=$(cat "$ISSUE_NUMBER_LIST_FILE" | grep -E "^$REPO" | awk '{ print $2 }')
  base_number=$(cat "$ISSUE_NUMBER_LIST_FILE" | grep -E "^$REPO" | awk '{ print $3 }')

  if [ "$base_date" = "" ] || [ "$base_number" = "" ]; then
    [ "$DEBUG" = "1" ] && echo "info: failed to retrieve base date or base number" >&2
    ghc issue list --repo "$REPO" --state "all" | grep -E "$DATE" | awk '{ print $1 }'
    return
  fi

  base_epoch=$(date -d "$base_date" +%s)
  target_epoch=$(date -d "$DATE" +%s)

  diff_days=$(( (target_epoch - base_epoch) / 86400 ))

  echo $(( base_number + diff_days ))
}

setup() {
  parse "$@"
  eval "set -- $REST"

  if [ "$DATE" = "" ] || [ "$REPO" = "" ]; then
    echo "error: one of the required params are missing" >&2
    exit 1
  fi

  if ! [ -e "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')" ]; then
    mkdir -p "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')"
  fi
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: todo-cache [options]... [arguments]..." ''
  msg -- 'Options:'
  param   DATE       --date  -- "target date"
  flag    DEBUG      --debug -- "debug mode"
  flag    FORCE      --force -- "get todo from API even if cache exists"
  param   REPO       --repo  -- "target repo"
  disp    :usage  -h --help
  disp    VERSION    --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DATE=''
DEBUG=''
FORCE=''
REPO=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--date')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        DATE="$OPTARG"
        shift ;;
      '--debug')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DEBUG="$OPTARG"
        ;;
      '--force')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        FORCE="$OPTARG"
        ;;
      '--repo')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        REPO="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: todo-cache [options]... [arguments]...

Options:
      --date DATE             target date
      --debug                 debug mode
      --force                 get todo from API even if cache exists
      --repo REPO             target repo
  -h, --help
      --version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
