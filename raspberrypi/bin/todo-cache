#!/bin/sh

set -eu
export GHC_FROM="$(basename "$0") $*"

CACHE_BASE_PATH="/home/ubuntu/workspace/log/pi/tmp/todo_caches"
CHECK_INTERVAL="1800"
GUESSED_ISSUES_LIST_FILE="guessed_issues_list"
ISSUES_LIST_INTERVAL="21600"
LEGITIMATE_ISSUES_LIST_FILE="legitimate_issues_list"
NEW_DAY_OFFSET="8 hours ago"

main() {
  parse "$@"
  eval "set -- $REST"

  validate "$@"
  setup "$@"

  filepath="$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')/$DATE"

  if [ -e "$filepath" ] && [ "$CACHE_ONLY" = "1" ]; then
    [ "$DEBUG" = "1" ] && echo "info: ignore check interval and use cache anyway because --cache-only is specified" >&2
    tail -n +4 "$filepath"
  elif [ -e "$filepath" ] && [ "$(echo $(( $(date '+%s') - $(cat "$filepath" | awk 'NR == 2') )) )" -lt "$CHECK_INTERVAL" ] && [ "$FORCE" != "1" ]; then
    [ "$DEBUG" = "1" ] && echo "info: cache found!" >&2
    tail -n +4 "$filepath"
  else
    [ "$DEBUG" = "1" ] && echo "info: cache is either not found, stale, or disabled" >&2
    issue_number=$(get_issue_number "$@")
    content=$(ghc issue view --repo "$REPO" "$issue_number" --json body --jq .body)
    printf "%s\n" "---" "$(date '+%s')" "---" "$content" > "$filepath"
    tail -n +4 "$filepath"
  fi
}

get_issue_number() {
  if ! [ -e "$CACHE_BASE_PATH/$GUESSED_ISSUES_LIST_FILE" ]; then
    [ "$DEBUG" = "1" ] && echo "info: $CACHE_BASE_PATH/$GUESSED_ISSUES_LIST_FILE not found" >&2

    if [ -e "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')/$LEGITIMATE_ISSUES_LIST_FILE" ] && [ "$(echo $(( $(date '+%s') - $(cat "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')/$LEGITIMATE_ISSUES_LIST_FILE" | awk 'NR == 2') )) )" -lt "$ISSUES_LIST_INTERVAL" ] && [ "$FORCE" != "1" ]; then
      [ "$DEBUG" = "1" ] && echo "info: issues list cache found!" >&2
      tail -n +4 "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')/$LEGITIMATE_ISSUES_LIST_FILE" | awk "NR == $(( PAST + 1 ))" | awk '{ print $1 }'
    else
      [ "$DEBUG" = "1" ] && echo "info: issues list cache is either not found, stale, or disabled" >&2
      issues=$(ghc issue list --repo "$REPO" --state "all")
      printf "%s\n" "---" "$(date '+%s')" "---" "$issues" > "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')/$LEGITIMATE_ISSUES_LIST_FILE"
      tail -n +4 "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')/$LEGITIMATE_ISSUES_LIST_FILE" | awk "NR == $(( PAST + 1 ))" | awk '{ print $1 }'
    fi

    return
  fi

  base_date=$(cat "$CACHE_BASE_PATH/$GUESSED_ISSUES_LIST_FILE" | grep -E "^$REPO" | awk '{ print $2 }')
  base_number=$(cat "$CACHE_BASE_PATH/$GUESSED_ISSUES_LIST_FILE" | grep -E "^$REPO" | awk '{ print $3 }')

  if [ "$base_date" = "" ] || [ "$base_number" = "" ]; then
    [ "$DEBUG" = "1" ] && echo "info: failed to retrieve base date or base number" >&2

    if [ -e "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')/$LEGITIMATE_ISSUES_LIST_FILE" ] && [ "$(echo $(( $(date '+%s') - $(cat "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')/$LEGITIMATE_ISSUES_LIST_FILE" | awk 'NR == 2') )) )" -lt "$ISSUES_LIST_INTERVAL" ] && [ "$FORCE" != "1" ]; then
      [ "$DEBUG" = "1" ] && echo "info: issues list cache found!" >&2
      tail -n +4 "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')/$LEGITIMATE_ISSUES_LIST_FILE" | awk "NR == $(( PAST + 1 ))" | awk '{ print $1 }'
    else
      [ "$DEBUG" = "1" ] && echo "info: issues list cache is either not found, stale, or disabled" >&2
      issues=$(ghc issue list --repo "$REPO" --state "all")
      printf "%s\n" "---" "$(date '+%s')" "---" "$issues" > "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')/$LEGITIMATE_ISSUES_LIST_FILE"
      tail -n +4 "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')/$LEGITIMATE_ISSUES_LIST_FILE" | awk "NR == $(( PAST + 1 ))" | awk '{ print $1 }'
    fi

    return
  fi

  base_epoch=$(date -d "$base_date" +%s)
  target_epoch=$(date -d "$DATE" +%s)

  diff_days=$(( (target_epoch - base_epoch) / 86400 ))

  echo $(( base_number + diff_days ))
}

validate() {
  if [ "$REPO" = "" ]; then
    echo "error: --repo is missing" >&2
    exit 1
  fi

  if [ "$DATE" = "" ] && [ "$PAST" = "" ]; then
    echo "either --date or --past is necessary" >&2
    exit 1
  fi

  if [ "$DATE" != "" ] && [ "$PAST" != "" ]; then
    echo "both --date and --past are not acceptable" >&2
    exit 1
  fi
}

setup() {
  if ! [ -e "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')" ]; then
    mkdir -p "$CACHE_BASE_PATH/$(echo "$REPO" | sed 's#.*/##' | tr '-' '_')"
  fi

  if [ "$DATE" = "" ]; then
    DATE=$(date -d "$PAST days ago $NEW_DAY_OFFSET" +%F)
  elif [ "$PAST" = "" ]; then
    today_epoch=$(date -d "$(date -d "$NEW_DAY_OFFSET" +%F)" +%s)
    input_epoch=$(date -d "$DATE" +%s)
    PAST="$(( (today_epoch - input_epoch) / 86400 ))"
  fi
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: todo-cache [options]... [arguments]..." ''
  msg -- 'Options:'
  param   DATE          --date       -- "target date (mutually exclusive with --past)"
  flag    DEBUG         --debug      -- "debug mode"
  flag    FORCE         --force      -- "get todo from API even if cache exists"
  flag    CACHE_ONLY    --cache-only -- "use cache even if cache is stale (ignore check interval)"
  param   PAST          --past       -- "how many days ago (mutually exclusive with --date)"
  param   REPO          --repo       -- "target repo"
  disp    :usage     -h --help
  disp    VERSION       --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DATE=''
DEBUG=''
FORCE=''
CACHE_ONLY=''
PAST=''
REPO=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--date')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        DATE="$OPTARG"
        shift ;;
      '--debug')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DEBUG="$OPTARG"
        ;;
      '--force')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        FORCE="$OPTARG"
        ;;
      '--cache-only')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        CACHE_ONLY="$OPTARG"
        ;;
      '--past')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        PAST="$OPTARG"
        shift ;;
      '--repo')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        REPO="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: todo-cache [options]... [arguments]...

Options:
      --date DATE             target date (mutually exclusive with --past)
      --debug                 debug mode
      --force                 get todo from API even if cache exists
      --cache-only            use cache even if cache is stale (ignore check interval)
      --past PAST             how many days ago (mutually exclusive with --date)
      --repo REPO             target repo
  -h, --help
      --version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
