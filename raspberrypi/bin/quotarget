#!/bin/sh

# The negative value indicates that --except is specified.
# For instance, the script returns true (1)
# if -4 ("--standard 4 --except") is specified
# and the number of unchecked marks is less than or equal to 4.
#
# | Service              | Timeframe | Daily | Today | Work  |
# | -------------------- | :-------: | :---: | :---: | :---: |
# | Discipline           | day       |    +8 |  ALL  |  ALL  |
# | Discipline           | night     |   +12 |  ALL  |  ALL  |
# | Gaming               | day       |    +8 |  ALL  |  ALL  |
# | Gaming               | night     |   +12 |  ALL  |  ALL  |
# | Netflix              | day       |   +10 |  ALL  |  ALL  |
# | Netflix              | night     |   +14 |  ALL  |  ALL  |
# | VOD                  | day       |   +10 |  ALL  |  ALL  |
# | VOD                  | night     |   +14 |  ALL  |  ALL  |
# | YouTube              | day       |    -4 |  ALL  |  ALL  |
# | YouTube              | night     |    -0 |  ALL  |  ALL  |
# | YouTube Alternative  | day       |    -8 |  ALL  |  ALL  |
# | YouTube Alternative  | night     |    -6 |  ALL  |  ALL  |
# | Deregulated Superman | day       |    +4 |  n/a  |  n/a  |
# | Deregulated Superman | night     |    +4 |  n/a  |  n/a  |
# | Maeve                | day       |    +8 |  n/a  |  n/a  |
# | Maeve                | night     |    +8 |  n/a  |  n/a  |
# | Ometeotl             | day       |    +6 |  n/a  |  n/a  |
# | Ometeotl             | night     |    +6 |  n/a  |  n/a  |
# | Superman             | day       |   +10 |  n/a  |  n/a  |
# | Superman             | night     |   +10 |  n/a  |  n/a  |
# | Upstream             | day       |    +4 |  n/a  |  n/a  |
# | Upstream             | night     |    +4 |  n/a  |  n/a  |

main() {
  prepare "$@"
  validate "$@"

  case "$SERVICE" in
    "discipline")
      case "$TIMEFRAME" in
        "day")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 8)
          task_personal=$(task-stacked --main-repo "noraworld/reserved-diary" --todo-repo "noraworld/to-do")

          todo_work=$(todo-accomplished     --repo "noraworld/daily-report"   --past 0 --retry 1 --standard 0 --except)
          task_work=$(task-stacked     --main-repo "noraworld/daily-report"   --todo-repo "noraworld/work-scraps")
          ;;
        "night")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 12)
          task_personal=$(task-stacked --main-repo "noraworld/reserved-diary" --todo-repo "noraworld/to-do")

          todo_work=$(todo-accomplished     --repo "noraworld/daily-report"   --past 0 --retry 1 --standard 0 --except)
          task_work=$(task-stacked     --main-repo "noraworld/daily-report"   --todo-repo "noraworld/work-scraps")
          ;;
      esac
      ;;
    "gaming")
      case "$TIMEFRAME" in
        "day")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 8)
          task_personal=$(task-stacked --main-repo "noraworld/reserved-diary" --todo-repo "noraworld/to-do")

          todo_work=$(todo-accomplished     --repo "noraworld/daily-report"   --past 0 --retry 1 --standard 0 --except)
          task_work=$(task-stacked     --main-repo "noraworld/daily-report"   --todo-repo "noraworld/work-scraps")
          ;;
        "night")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 12)
          task_personal=$(task-stacked --main-repo "noraworld/reserved-diary" --todo-repo "noraworld/to-do")

          todo_work=$(todo-accomplished     --repo "noraworld/daily-report"   --past 0 --retry 1 --standard 0 --except)
          task_work=$(task-stacked     --main-repo "noraworld/daily-report"   --todo-repo "noraworld/work-scraps")
          ;;
      esac
      ;;
    "netflix")
      case "$TIMEFRAME" in
        "day")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 10)
          task_personal=$(task-stacked --main-repo "noraworld/reserved-diary" --todo-repo "noraworld/to-do")

          todo_work=$(todo-accomplished     --repo "noraworld/daily-report"   --past 0 --retry 1 --standard 0 --except)
          task_work=$(task-stacked     --main-repo "noraworld/daily-report"   --todo-repo "noraworld/work-scraps")
          ;;
        "night")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 14)
          task_personal=$(task-stacked --main-repo "noraworld/reserved-diary" --todo-repo "noraworld/to-do")

          todo_work=$(todo-accomplished     --repo "noraworld/daily-report"   --past 0 --retry 1 --standard 0 --except)
          task_work=$(task-stacked     --main-repo "noraworld/daily-report"   --todo-repo "noraworld/work-scraps")
          ;;
      esac
      ;;
    "vod")
      case "$TIMEFRAME" in
        "day")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 10)
          task_personal=$(task-stacked --main-repo "noraworld/reserved-diary" --todo-repo "noraworld/to-do")

          todo_work=$(todo-accomplished     --repo "noraworld/daily-report"   --past 0 --retry 1 --standard 0 --except)
          task_work=$(task-stacked     --main-repo "noraworld/daily-report"   --todo-repo "noraworld/work-scraps")
          ;;
        "night")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 14)
          task_personal=$(task-stacked --main-repo "noraworld/reserved-diary" --todo-repo "noraworld/to-do")

          todo_work=$(todo-accomplished     --repo "noraworld/daily-report"   --past 0 --retry 1 --standard 0 --except)
          task_work=$(task-stacked     --main-repo "noraworld/daily-report"   --todo-repo "noraworld/work-scraps")
          ;;
      esac
      ;;
    "youtube")
      case "$TIMEFRAME" in
        "day")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 4 --except)
          task_personal=$(task-stacked --main-repo "noraworld/reserved-diary" --todo-repo "noraworld/to-do")

          todo_work=$(todo-accomplished     --repo "noraworld/daily-report"   --past 0 --retry 1 --standard 0 --except)
          task_work=$(task-stacked     --main-repo "noraworld/daily-report"   --todo-repo "noraworld/work-scraps")
          ;;
        "night")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 0 --except)
          task_personal=$(task-stacked --main-repo "noraworld/reserved-diary" --todo-repo "noraworld/to-do")

          todo_work=$(todo-accomplished     --repo "noraworld/daily-report"   --past 0 --retry 1 --standard 0 --except)
          task_work=$(task-stacked     --main-repo "noraworld/daily-report"   --todo-repo "noraworld/work-scraps")
          ;;
      esac
      ;;
    "youtube-alternative")
      case "$TIMEFRAME" in
        "day")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 8 --except)
          task_personal=$(task-stacked --main-repo "noraworld/reserved-diary" --todo-repo "noraworld/to-do")

          todo_work=$(todo-accomplished     --repo "noraworld/daily-report"   --past 0 --retry 1 --standard 0 --except)
          task_work=$(task-stacked     --main-repo "noraworld/daily-report"   --todo-repo "noraworld/work-scraps")
          ;;
        "night")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 6 --except)
          task_personal=$(task-stacked --main-repo "noraworld/reserved-diary" --todo-repo "noraworld/to-do")

          todo_work=$(todo-accomplished     --repo "noraworld/daily-report"   --past 0 --retry 1 --standard 0 --except)
          task_work=$(task-stacked     --main-repo "noraworld/daily-report"   --todo-repo "noraworld/work-scraps")
          ;;
      esac
      ;;
    "deregulated-superman")
      case "$TIMEFRAME" in
        "day")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 4)
          ;;
        "night")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 4)
          ;;
      esac
      ;;
    "maeve")
      case "$TIMEFRAME" in
        "day")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 8)
          ;;
        "night")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 8)
          ;;
      esac
      ;;
    "ometeotl")
      case "$TIMEFRAME" in
        "day")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 6)
          ;;
        "night")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 6)
          ;;
      esac
      ;;
    "superman")
      case "$TIMEFRAME" in
        "day")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 10)
          ;;
        "night")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 10)
          ;;
      esac
      ;;
    "upstream")
      case "$TIMEFRAME" in
        "day")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 4)
          ;;
        "night")
          todo_personal=$(todo-accomplished --repo "noraworld/reserved-diary" --past 0 --retry 1 --standard 4)
          ;;
      esac
      ;;
    *)
      echo "invalid service name: $SERVICE" >&2
      exit 1
      ;;
  esac

  sum=$(( $todo_personal + $todo_work + $task_personal + $task_work ))
  product=$(( $todo_personal * $todo_work * $task_personal * $task_work ))

  if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: todo_personal = $todo_personal" >&2
    echo "DEBUG: todo_work     = $todo_work"     >&2
    echo "DEBUG: task_personal = $task_personal" >&2
    echo "DEBUG: task_work     = $task_work"     >&2
    echo "DEBUG: sum           = $sum"           >&2
    echo "DEBUG: product       = $product"       >&2
  fi

  if [ "$sum" = "6" ] && [ "$product" = "4" ]; then
    echo "1"
  elif [ "$product" = "0" ]; then
    echo "0"
  else
    echo "-1"
  fi
}

prepare() {
  parse "$@"
  eval "set -- $REST"
}

validate() {
  if [ "$TIMEFRAME" != "day" ] && [ "$TIMEFRAME" != "night" ]; then
    echo "invalid timeframe: $TIMEFRAME" >&2
    exit 1
  fi
}

# @getoptions
parser_definition() {
  setup REST help:usage -- "Usage: quotarget [options]... [arguments]..." ''
  msg -- 'Options:'
  flag  DEBUG        --debug     -- "show debug messages"
  param SERVICE      --service   -- "youtube, vod, ..."
  param TIMEFRAME    --timeframe -- "day or night"
  disp  :usage    -h --help
  disp  VERSION      --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DEBUG=''
SERVICE=''
TIMEFRAME=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--debug')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DEBUG="$OPTARG"
        ;;
      '--service')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        SERVICE="$OPTARG"
        shift ;;
      '--timeframe')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        TIMEFRAME="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: quotarget [options]... [arguments]...

Options:
      --debug                 show debug messages
      --service SERVICE       youtube, vod, ...
      --timeframe TIMEFRAME   day or night
  -h, --help
      --version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
