#!/bin/sh

STRATEGY="scraping_by"
STRATEGY_FILE="/home/ubuntu/workspace/cron-conf/raspberrypi/config/quotarget.json"
TIMEFRAME_LIST="predawn dawn morning midday afternoon evening night midnight"

main() {
  prepare "$@"
  validate "$@"

  if [ "$FORCE" = "1" ]; then
    force="--force"
  else
    force=""
  fi

  todo_personal_cmd=$(
    jq ".\"${SERVICE}\".${TIMEFRAME}.${STRATEGY}.todo_personal" "$STRATEGY_FILE" |
    sed -e 's/^"//' -e 's/"$//' -e 's/\\"/"/g'
  )

  task_personal_cmd=$(
    jq ".\"${SERVICE}\".${TIMEFRAME}.${STRATEGY}.task_personal" "$STRATEGY_FILE" |
    sed -e 's/^"//' -e 's/"$//' -e 's/\\"/"/g'
  )

  todo_work_cmd=$(
    jq ".\"${SERVICE}\".${TIMEFRAME}.${STRATEGY}.todo_work" "$STRATEGY_FILE" |
    sed -e 's/^"//' -e 's/"$//' -e 's/\\"/"/g'
  )

  task_work_cmd=$(
    jq ".\"${SERVICE}\".${TIMEFRAME}.${STRATEGY}.task_work" "$STRATEGY_FILE" |
    sed -e 's/^"//' -e 's/"$//' -e 's/\\"/"/g'
  )

  todo_personal_result=$(eval "$todo_personal_cmd")
  task_personal_result=$(eval "$task_personal_cmd")
  todo_work_result=$(eval "$todo_work_cmd")
  task_work_result=$(eval "$task_work_cmd")

  sum=$(( todo_personal_result + todo_work_result + task_personal_result + task_work_result ))
  product=$(( todo_personal_result * todo_work_result * task_personal_result * task_work_result ))

  if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: todo_personal_cmd:    $todo_personal_cmd"    >&2
    echo "DEBUG: todo_personal_result: $todo_personal_result" >&2
    echo "DEBUG:"                                             >&2
    echo "DEBUG: task_personal_cmd:    $task_personal_cmd"    >&2
    echo "DEBUG: task_personal_result: $task_personal_result" >&2
    echo "DEBUG:"                                             >&2
    echo "DEBUG: todo_work_cmd:        $todo_work_cmd"        >&2
    echo "DEBUG: todo_work_result:     $todo_work_result"     >&2
    echo "DEBUG:"                                             >&2
    echo "DEBUG: task_work_cmd:        $task_work_cmd"        >&2
    echo "DEBUG: task_work_result:     $task_work_result"     >&2
    echo "DEBUG:"                                             >&2
    echo "DEBUG: sum:                  $sum"                  >&2
    echo "DEBUG: product:              $product"              >&2
  fi

  if [ "$sum" = "6" ] && [ "$product" = "4" ]; then
    echo "1"
  elif [ "$product" = "0" ]; then
    echo "0"
  else
    echo "-1"
  fi
}

prepare() {
  parse "$@"
  eval "set -- $REST"
}

validate() {
  valid_tf=false

  for tf in $TIMEFRAME_LIST; do
    if [ "$TIMEFRAME" = "$tf" ]; then
      valid_tf=true
      break
    fi
  done

  if [ "$valid_tf" != "true" ]; then
    echo "Error: Invalid TIMEFRAME: $TIMEFRAME" >&2
    exit 1
  fi
}

# @getoptions
parser_definition() {
  setup REST help:usage -- "Usage: quotarget [options]... [arguments]..." ''
  msg -- 'Options:'
  flag  DEBUG        --debug     -- "show debug messages"
  flag  FORCE        --force     -- "get content from APIs even if cache exists"
  param SERVICE      --service   -- "youtube, vod, ..."
  param TIMEFRAME    --timeframe -- "timeframe"
  disp  :usage    -h --help
  disp  VERSION      --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DEBUG=''
FORCE=''
SERVICE=''
TIMEFRAME=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--debug')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DEBUG="$OPTARG"
        ;;
      '--force')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        FORCE="$OPTARG"
        ;;
      '--service')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        SERVICE="$OPTARG"
        shift ;;
      '--timeframe')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        TIMEFRAME="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: quotarget [options]... [arguments]...

Options:
      --debug                 show debug messages
      --force                 get content from APIs even if cache exists
      --service SERVICE       youtube, vod, ...
      --timeframe TIMEFRAME   timeframe
  -h, --help
      --version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
