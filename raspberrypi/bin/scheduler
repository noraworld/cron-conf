#!/bin/sh
# shellcheck disable=SC2004

main() {
  service="$1"
  operation="$2"

  parse "$@"
  eval "set -- $REST"

  if [ "$SAFE" = 1 ]; then
    safe="--safe"
  else
    # shellcheck disable=SC2034
    safe=""
  fi

  case "$service" in
    "amazon")
      amazon
      ;;
    "chime")
      chime
      ;;
    "daily")
      daily
      ;;
    "deregulated-superman")
      deregulated_superman
      ;;
    "deregulated-superman-allow")
      deregulated_superman_allow
      ;;
    "focus")
      focus
      ;;
    "github-editor")
      github_editor
      ;;
    "netflix")
      netflix
      ;;
    "observe")
      observe
      ;;
    "ometeotl")
      ometeotl
      ;;
    "periodic")
      periodic
      ;;
    "startup")
      startup
      ;;
    "superman")
      superman
      ;;
    "upstream")
      upstream
      ;;
    "vod")
      vod
      ;;
    "youtube")
      youtube
      ;;
    "youtube-music")
      youtube_music
      ;;
    *)
      echo "error: no such service: \"$service\"" >&2
      exit 1
      ;;
  esac
}

amazon() {
  case "$operation" in
    "deny")
      cron-daemonctl start observe-amazon-conf "$safe"
      sudo create-dnsmasq-toggle-conf public amazon
      # create-iptables-toggle-conf public 131_amazon
      ;;
    "allow")
      cron-daemonctl stop observe-amazon-conf "$safe"
      sudo remove-dnsmasq-toggle-conf public amazon
      # remove-iptables-toggle-conf public 131_amazon
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

chime() {
  case "$operation" in
    "deny")
      sudo create-dnsmasq-toggle-conf public chime
      ;;
    "allow")
      sudo remove-dnsmasq-toggle-conf public chime
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

daily() {
  metronome set full
  sudo systemctl restart diary
}

deregulated_superman() {
  case "$operation" in
    "deny")
      # cron-daemonctl start observe-deregulated-superman-conf "$safe"
      sudo create-dnsmasq-toggle-conf private deregulated_superman
      # create-iptables-toggle-conf private 231_deregulated_superman
      ;;
    "allow")
      :
      # cron-daemonctl stop observe-deregulated-superman-conf "$safe"
      # sudo remove-dnsmasq-toggle-conf private deregulated_superman
      # remove-iptables-toggle-conf private 231_deregulated_superman
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

deregulated_superman_allow() {
  case "$operation" in
    "deny")
      # cron-daemonctl start observe-deregulated-superman-allow-conf "$safe"
      sudo remove-dnsmasq-toggle-conf private deregulated_superman_allow
      ;;
    "allow")
      :
      # cron-daemonctl stop observe-deregulated-superman-allow-conf "$safe"
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

focus() {
  case "$operation" in
    "deny")
      cron-daemonctl start observe-focus-conf "$safe"
      sudo create-dnsmasq-toggle-conf private focus
      # create-iptables-toggle-conf private 232_focus
      ;;
    "allow")
      cron-daemonctl stop observe-focus-conf "$safe"
      sudo remove-dnsmasq-toggle-conf private focus
      # remove-iptables-toggle-conf private 232_focus
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

github_editor() {
  case "$operation" in
    "deny")
      cron-daemonctl start observe-github-editor-conf "$safe"
      sudo create-dnsmasq-toggle-conf public github_editor
      ;;
    "allow")
      cron-daemonctl stop observe-github-editor-conf "$safe"
      sudo remove-dnsmasq-toggle-conf public github_editor
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

netflix() {
  case "$operation" in
    "deny")
      cron-daemonctl start observe-netflix-conf "$safe"
      sudo create-dnsmasq-toggle-conf public netflix
      # create-iptables-toggle-conf public 132_netflix
      ;;
    "allow")
      cron-daemonctl stop observe-netflix-conf "$safe"
      sudo remove-dnsmasq-toggle-conf public netflix
      # remove-iptables-toggle-conf public 132_netflix
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

observe() {
  case "$operation" in
    "start")
      cron-daemonctl start observe-crontab "$safe"
      cron-daemonctl start observe-cron-conf "$safe"
      cron-daemonctl start observe-dnsmasq-conf "$safe"
      cron-daemonctl start observe-dnsmasq-priv-conf "$safe"
      cron-daemonctl start observe-netplan-conf "$safe"
      ;;
    "stop")
      cron-daemonctl stop observe-crontab "$safe"
      cron-daemonctl stop observe-cron-conf "$safe"
      cron-daemonctl stop observe-dnsmasq-conf "$safe"
      cron-daemonctl stop observe-dnsmasq-priv-conf "$safe"
      cron-daemonctl stop observe-netplan-conf "$safe"
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

ometeotl() {
  case "$operation" in
    "deny")
      # cron-daemonctl start observe-ometeotl-conf "$safe"
      sudo create-dnsmasq-toggle-conf private ometeotl
      # create-iptables-toggle-conf private 234_ometeotl
      ;;
    "allow")
      :
      # cron-daemonctl stop observe-ometeotl-conf "$safe"
      # sudo remove-dnsmasq-toggle-conf private ometeotl
      # remove-iptables-toggle-conf private 234_ometeotl
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

periodic() {
  # Auto-update cron conf
  ca

  # Observe IP address not getting lost
  sudo ip-observer

  # Observe the system clock not lagging
  clock-observer

  # Observe a firewall blocking the DNS port
  #
  # How to check if it works fine:
  #
  #   Make sure the following command returns 0
  #     $ sudo iptables-save | grep -i "forward" | grep "53" | grep -c "ACCEPT"
  #
  #   Then execute the following command
  #     $ sudo iptables -A FORWARD -p udp -m udp --dport 53 -j ACCEPT
  #
  #   Perform the following command again and make sure it returns 1
  #     $ sudo iptables-save | grep -i "forward" | grep "53" | grep -c "ACCEPT"
  #
  #   If it works properly, the result of the above command should be reset to 0 when the observer is executed
  #
  observe-firewall

  # Auto-update specific Git repositories
  auto-git-pull
}

startup() {
  log-reboot
  clock-observer
  metronome set full
  # marlin re-disconnect all --retry=2
}

superman() {
  case "$operation" in
    "deny")
      # cron-daemonctl start observe-superman-conf "$safe"
      sudo create-dnsmasq-toggle-conf private superman
      # create-iptables-toggle-conf private 233_superman
      ;;
    "allow")
      :
      # cron-daemonctl stop observe-superman-conf "$safe"
      # sudo remove-dnsmasq-toggle-conf private superman
      # remove-iptables-toggle-conf private 233_superman
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

upstream() {
  case "$operation" in
    "deny")
      # cron-daemonctl start observe-superman-upstream-conf "$safe"
      sudo remove-dnsmasq-toggle-conf private adguard_upstream
      sudo create-dnsmasq-toggle-conf private superman_upstream
      ;;
    "allow")
      # cron-daemonctl stop observe-superman-upstream-conf "$safe"
      sudo remove-dnsmasq-toggle-conf private superman_upstream
      sudo create-dnsmasq-toggle-conf private adguard_upstream
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

vod() {
  case "$operation" in
    "deny")
      cron-daemonctl start observe-vod-conf "$safe"
      sudo create-dnsmasq-toggle-conf public vod
      # create-iptables-toggle-conf public 133_vod
      ;;
    "allow")
      cron-daemonctl stop observe-vod-conf "$safe"
      sudo remove-dnsmasq-toggle-conf public vod
      # remove-iptables-toggle-conf public 133_vod
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

youtube() {
  case "$operation" in
    "deny")
      cron-daemonctl start observe-youtube-conf "$safe"
      sudo create-dnsmasq-toggle-conf public youtube
      # create-iptables-toggle-conf public 134_youtube
      ;;
    "allow")
      cron-daemonctl stop observe-youtube-conf "$safe"
      # sudo remove-dnsmasq-toggle-conf public youtube
      # remove-iptables-toggle-conf public 134_youtube
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

youtube_music() {
  case "$operation" in
    "deny")
      # cron-daemonctl start observe-youtube-music-conf "$safe"
      sudo remove-dnsmasq-toggle-conf public youtube_music
      # remove-iptables-toggle-conf public 135_youtube_music
      ;;
    "allow")
      :
      # cron-daemonctl stop observe-youtube-music-conf "$safe"
      # sudo create-dnsmasq-toggle-conf public youtube_music
      # create-iptables-toggle-conf public 135_youtube_music
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: scheduler [options]... [arguments]..." ''
  msg -- 'Options:'
  flag    SAFE       --safe    -- "not getting punished"
  disp    :usage  -h --help    -- "show help message and exit"
  disp    VERSION    --version -- "show current version"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
SAFE=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--safe')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        SAFE="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: scheduler [options]... [arguments]...

Options:
      --safe                  not getting punished
  -h, --help                  show help message and exit
      --version               show current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
