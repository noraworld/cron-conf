#!/bin/sh

TIMEFRAME_LIST="qtg0000 qtg0100 qtg0200 qtg0300 qtg0400 qtg0500 qtg0600 qtg0700 qtg0800 qtg0900 qtg1000 qtg1100 qtg1200 qtg1300 qtg1400 qtg1500 qtg1600 qtg1700 qtg1800 qtg1900 qtg2000 qtg2100 qtg2200 qtg2300"

main() {
  parse "$@"
  eval "set -- $REST"

  services=$@
  quotarget_service=""

  if [ "$services" = "" ]; then
    echo "error: service names are missing" >&2
    exit
  fi

  # multiple services or "all" cannot be specified for quotarget for now
  if [ "$services" = "all" ] || [ "$(echo "$services" | grep -c ' ')" -gt 0 ]; then
    quotarget_service="youtube"
  else
    quotarget_service="$services"
  fi

  sleep_interval=30
  if [ "$SLEEP" != "" ]; then
    sleep_interval="$SLEEP"
  fi

  if [ "$FORCE" = "1" ]; then
    force="--force"
  else
    force=""
  fi

  if [ "$CACHE_ONLY" = "1" ]; then
    cache_only="--cache-only"
  else
    cache_only=""
  fi

  if [ "$INTERVAL" = "" ]; then
    INTERVAL=10
  fi

  if [ "$RETRY" = "" ]; then
    RETRY=5
  fi

  force_retry_flag="false"

  if [ "$MORNING" = 1 ]; then
    garnish prep
    echo
  elif ! echo "$IGNORE" | grep -Eq "(^|,)quotarget(,|$)"; then
    accomplished="0"

    while [ "$accomplished" -eq 0 ] || [ "$force_retry_flag" = "true" ]; do
      force_retry_flag="false"

      for tf in $TIMEFRAME_LIST; do
        if [ "$(systemctl --user is-active observe-dnsmasq-todo-list-"$tf" | grep -c inactive)" -eq 0 ]; then
          # There is an unknown phenomenon the restrictions are not regulated even though the tasks have been accomplished.
          # That's resolved by restarting the daemon for some reason.
          if [ "$REFRESH" = "1" ]; then
            systemctl --user restart observe-dnsmasq-todo-list-"$tf"
            echo "waiting for 10 seconds"
            sleep "10"
          fi

          accomplished=$(quotarget --timeframe "$tf" --service $quotarget_service $force $cache_only)
          [ "$?" != "0" ] && exit 1

          break
        fi
      done

      # value: negative
      if [ "$accomplished" -lt 0 ]; then
        echo "Not accomplished yet." >&2

        if [ "$FORCE_RETRY" = "1" ]; then
          echo "Trying again with --force" >&2
          force="--force"
          force_retry_flag="true"
          FORCE_RETRY="0"
        else
          exit
        fi
      fi

      # value: zero
      if [ "$accomplished" -eq 0 ]; then
        echo "Failed to retrieve todo list. Retry in $sleep_interval seconds."
        sleep "$sleep_interval"
      fi
    done
  fi

  if [ "$SINCERE" = "1" ]; then
    printf "sincere: "
    sincerely=$(sincere $force $cache_only)
    echo "$sincerely"

    if [ "$sincerely" -le 0 ] && ! echo "$IGNORE" | grep -Eq "(^|,)sincere(,|$)"; then
      exit 1
    fi
  fi

  # value: positive
  if [ "$DRY_RUN" != "1" ]; then
    unlock $services --skip --interval $INTERVAL --retry $RETRY
  else
    echo "Accomplished!!"
  fi
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: trailblazer [options]... [arguments]..." ''
  msg -- 'Options:'
  flag    DRY_RUN        --dry-run     -- "just show the success message instead of unlocking the services"
  flag    FORCE          --force       -- "get content from APIs even if cache exists"
  flag    FORCE_RETRY    --force-retry -- "perform without force option first, then execute with force option if the first attempt fails"
  param   IGNORE         --ignore      -- "skip specific check processes (ones in daemon, quotarget, sincere)"
  param   INTERVAL       --interval    -- "wait for the given number of seconds each time (unlock)"
  flag    MORNING        --morning     -- "skip quotarget, and ask to prepare a piece of garlic"
  flag    CACHE_ONLY     --cache-only  -- "use cache even if cache is stale (ignore check interval)"
  flag    REFRESH        --refresh     -- "restart todo-list daemon before check"
  param   RETRY          --retry       -- "try to create or delete symlinks the given number of times (unlock)"
  flag    SINCERE        --sincere     -- "execute sincere before running"
  param   SLEEP          --sleep       -- "how many seconds to wait for the next attempt"
  disp    :usage      -h --help
  disp    VERSION        --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DRY_RUN=''
FORCE=''
FORCE_RETRY=''
IGNORE=''
INTERVAL=''
MORNING=''
CACHE_ONLY=''
REFRESH=''
RETRY=''
SINCERE=''
SLEEP=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--dry-run')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DRY_RUN="$OPTARG"
        ;;
      '--force')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        FORCE="$OPTARG"
        ;;
      '--force-retry')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        FORCE_RETRY="$OPTARG"
        ;;
      '--ignore')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        IGNORE="$OPTARG"
        shift ;;
      '--interval')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        INTERVAL="$OPTARG"
        shift ;;
      '--morning')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        MORNING="$OPTARG"
        ;;
      '--cache-only')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        CACHE_ONLY="$OPTARG"
        ;;
      '--refresh')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        REFRESH="$OPTARG"
        ;;
      '--retry')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        RETRY="$OPTARG"
        shift ;;
      '--sincere')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        SINCERE="$OPTARG"
        ;;
      '--sleep')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        SLEEP="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: trailblazer [options]... [arguments]...

Options:
      --dry-run               just show the success message instead of unlocking the services
      --force                 get content from APIs even if cache exists
      --force-retry           perform without force option first, then execute with force option if the first attempt fails
      --ignore IGNORE         skip specific check processes (ones in daemon, quotarget, sincere)
      --interval INTERVAL     wait for the given number of seconds each time (unlock)
      --morning               skip quotarget, and ask to prepare a piece of garlic
      --cache-only            use cache even if cache is stale (ignore check interval)
      --refresh               restart todo-list daemon before check
      --retry RETRY           try to create or delete symlinks the given number of times (unlock)
      --sincere               execute sincere before running
      --sleep SLEEP           how many seconds to wait for the next attempt
  -h, --help
      --version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
