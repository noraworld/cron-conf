#!/bin/sh

main() {
  parse "$@"
  eval "set -- $REST"

  services=$@
  quotarget_service=""

  if [ "$services" = "" ]; then
    echo "error: service names are missing" >&2
    exit
  fi

  # multiple services or "all" cannot be specified for quotarget for now
  if [ "$services" = "all" ] || [ "$(echo "$services" | grep -c ' ')" -gt 0 ]; then
    quotarget_service="youtube"
  else
    quotarget_service="$services"
  fi

  sleep_interval=30
  if [ "$SLEEP" != "" ]; then
    sleep_interval="$SLEEP"
  fi

  if [ "$MORNING" = 1 ]; then
    echo -n "Would you like to prepare a piece of garlic? [y/N]: "
    exec < /dev/tty
    read confirm
    if [ "$confirm" = "y" ] || [ "$confirm" = "yes" ]; then
      garnish prep
    else
      echo "OK, it won't be created." >&2
    fi
    echo
  else
    accomplished="0"

    while [ "$accomplished" -eq 0 ]; do
      if [ "$(systemctl --user is-active observe-dnsmasq-todo-list | grep -c inactive)" -eq 0 ]; then
        # There is an unknown phenomenon the restrictions are not regulated even though the tasks have been accomplished.
        # That's resolved by restarting the daemon for some reason.
        systemctl --user restart observe-dnsmasq-todo-list
        echo "waiting for 10 seconds" && sleep "10" # need?
        accomplished=$(quotarget --timeframe day --service $quotarget_service)
        [ "$?" != "0" ] && exit 1
      elif [ "$(systemctl --user is-active observe-dnsmasq-todo-list-night | grep -c inactive)" -eq 0 ]; then
        # There is an unknown phenomenon the restrictions are not regulated even though the tasks have been accomplished.
        # That's resolved by restarting the daemon for some reason.
        systemctl --user restart observe-dnsmasq-todo-list-night
        echo "waiting for 10 seconds" && sleep "10" # need?
        accomplished=$(quotarget --timeframe night --service $quotarget_service)
        [ "$?" != "0" ] && exit 1
      elif [ "$(systemctl --user is-active observe-dnsmasq-todo-list-midnight | grep -c inactive)" -eq 0 ]; then
        # There is an unknown phenomenon the restrictions are not regulated even though the tasks have been accomplished.
        # That's resolved by restarting the daemon for some reason.
        systemctl --user restart observe-dnsmasq-todo-list-midnight
        echo "waiting for 10 seconds" && sleep "10" # need?
        accomplished=$(quotarget --timeframe midnight --service $quotarget_service)
        [ "$?" != "0" ] && exit 1
      fi

      # value: negative
      if [ "$accomplished" -lt 0 ]; then
        echo "Not accomplished yet." >&2
        exit
      fi

      # value: zero
      if [ "$accomplished" -eq 0 ]; then
        echo "Failed to retrieve todo list. Retry in $sleep_interval seconds."
        sleep "$sleep_interval"
      fi
    done
  fi

  # value: positive
  if [ "$DRY_RUN" != "1" ]; then
    unlock $services --skip
  else
    echo "Accomplished!!"
  fi
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: trailblazer [options]... [arguments]..." ''
  msg -- 'Options:'
  flag    DRY_RUN    --dry-run -- "just show the success message instead of unlocking the services"
  flag    MORNING    --morning -- "skip quotarget, and ask to prepare a piece of garlic"
  param   SLEEP      --sleep   -- "how many seconds to wait for the next attempt"
  disp    :usage  -h --help
  disp    VERSION    --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DRY_RUN=''
MORNING=''
SLEEP=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--dry-run')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DRY_RUN="$OPTARG"
        ;;
      '--morning')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        MORNING="$OPTARG"
        ;;
      '--sleep')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        SLEEP="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: trailblazer [options]... [arguments]...

Options:
      --dry-run               just show the success message instead of unlocking the services
      --morning               skip quotarget, and ask to prepare a piece of garlic
      --sleep SLEEP           how many seconds to wait for the next attempt
  -h, --help
      --version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
