#!/bin/sh
# shellcheck disable=SC2004

set -eu
trap remaining_time EXIT

reference_minute=0

PROG_NAME="unlock"

COOLDOWN_INTERVAL=0  # ideal: 3
WAITING_INTERVAL=0.5 # ideal: 0.5
TIMES_INTERVAL=5     # ideal: 5
TIMES_LIMIT=100      # ideal: 6

COOLDOWN_MESSAGE="to avoid excessive execution"
WAITING_MESSAGE="for the observer daemon to be effective"

ERROR_COLOR="\033[0;31m"
NO_COLOR="\033[0m"

main() {
  service="$1"

  parse "$@"
  eval "set -- $REST"

  pause "$COOLDOWN_INTERVAL" "$COOLDOWN_MESSAGE"

  case "$service" in
    "chime")
      chime
      ;;
    "deregulated-superman")
      deregulated_superman
      ;;
    "ometeotl")
      ometeotl
      ;;
    "superman")
      superman
      ;;
    "vod")
      vod
      ;;
    "youtube")
      youtube
      ;;
    "youtube-alternative")
      youtube_alternative
      ;;
    "youtube-music")
      youtube_music
      ;;
    "adguard-upstream")
      adguard_upstream
      ;;
    "cloudflare-upstream")
      cloudflare_upstream
      ;;
    "nordvpn-upstream")
      nordvpn_upstream
      ;;
    "superman-upstream")
      superman_upstream
      ;;
    *)
      echo "error: no such service $service" >&2
      exit 1
      ;;
  esac

  # clear
  echo "restarting dnsmasq"
  erd --log /home/ubuntu/.log/erd.log --from "$PROG_NAME"

  if [ "$(sudo systemctl is-active dnsmasq)" != "active" ]; then
    echo "error: dnsmasq daemon could not restart unexpectedly" >&2
    sudo systemctl status dnsmasq >&2
    exit 1
  fi
}

chime() {
  reference_minute=10
  [ "$DRY_RUN" = 1 ] && exit 0

  error_color
  sudo unlink /etc/dnsmasq.toggle/chime.conf
  no_color

  if [ "$(is_observer_active "chime")" = "active" ]; then
    pause "$WAITING_INTERVAL" "$WAITING_MESSAGE"
  fi

  if [ -L /etc/dnsmasq.toggle/chime.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/chime.conf still exists" >&2
    no_color
    exit
  fi
}

deregulated_superman() {
  reference_minute=30
  [ "$DRY_RUN" = 1 ] && exit 0

  if ! [ -L /etc/dnsmasq.priv/toggle/deregulated_superman_allow.conf ]; then
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/deregulated_superman_allow.conf /etc/dnsmasq.priv/toggle
  fi

  error_color
  sudo unlink /etc/dnsmasq.priv/toggle/deregulated_superman.conf
  no_color

  if [ "$(is_observer_active "deregulated-superman")" = "active" ]; then
    pause "$WAITING_INTERVAL" "$WAITING_MESSAGE"
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/deregulated_superman_allow.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/deregulated_superman_allow.conf still doesn't exist" >&2
    no_color
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/deregulated_superman.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/deregulated_superman.conf still exists" >&2
    no_color
    exit
  fi
}

ometeotl() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  error_color
  sudo unlink /etc/dnsmasq.priv/toggle/ometeotl.conf
  no_color

  if [ "$(is_observer_active "ometeotl")" = "active" ]; then
    pause "$WAITING_INTERVAL" "$WAITING_MESSAGE"
  fi

  if [ -L /etc/dnsmasq.priv/toggle/ometeotl.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/ometeotl.conf still exists" >&2
    no_color
    exit
  fi
}

superman() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  if [ -L /etc/dnsmasq.priv/toggle/ometeotl.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/ometeotl.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/superman_upstream.conf
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/adguard_upstream.conf /etc/dnsmasq.priv/toggle
  fi

  error_color
  sudo unlink /etc/dnsmasq.priv/toggle/superman.conf
  no_color

  if [ "$(is_observer_active "superman")" = "active" ]; then
    pause "$WAITING_INTERVAL" "$WAITING_MESSAGE"
  fi

  if [ -L /etc/dnsmasq.priv/toggle/ometeotl.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/ometeotl.conf still exists" >&2
    no_color
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/adguard_upstream.conf still doesn't exist" >&2
    no_color
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman.conf still exists" >&2
    no_color
    exit
  fi
}

vod() {
  reference_minute=5
  [ "$DRY_RUN" = 1 ] && exit 0

  if [ -L /etc/dnsmasq.priv/toggle/ometeotl.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/ometeotl.conf
  fi

  error_color
  sudo unlink /etc/dnsmasq.toggle/vod.conf
  no_color

  if [ "$(is_observer_active "vod")" = "active" ]; then
    pause "$WAITING_INTERVAL" "$WAITING_MESSAGE"
  fi

  if [ -L /etc/dnsmasq.priv/toggle/ometeotl.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/ometeotl.conf still exists" >&2
    no_color
    exit
  fi

  if [ -L /etc/dnsmasq.toggle/vod.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/vod.conf still exists" >&2
    no_color
    exit
  fi
}

youtube() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  error_color
  sudo unlink /etc/dnsmasq.toggle/youtube.conf
  no_color

  if [ "$(is_observer_active "youtube")" = "active" ]; then
    pause "$WAITING_INTERVAL" "$WAITING_MESSAGE"
  fi

  if [ -L /etc/dnsmasq.toggle/youtube.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/youtube.conf still exists" >&2
    no_color
    exit
  fi
}

youtube_alternative() {
  reference_minute=10
  [ "$DRY_RUN" = 1 ] && exit 0

  error_color
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.toggle/youtube_alternative.conf /etc/dnsmasq.toggle
  no_color

  if [ "$(is_observer_active "youtube-alternative")" = "active" ]; then
    pause "$WAITING_INTERVAL" "$WAITING_MESSAGE"
  fi

  if ! [ -L /etc/dnsmasq.toggle/youtube_alternative.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/youtube_alternative.conf still doesn't exist" >&2
    no_color
    exit
  fi
}

youtube_music() {
  reference_minute=10
  [ "$DRY_RUN" = 1 ] && exit 0

  error_color
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.toggle/youtube_music.conf /etc/dnsmasq.toggle
  no_color

  if [ "$(is_observer_active "youtube-music")" = "active" ]; then
    pause "$WAITING_INTERVAL" "$WAITING_MESSAGE"
  fi

  if ! [ -L /etc/dnsmasq.toggle/youtube_music.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/youtube_music.conf still doesn't exist" >&2
    no_color
    exit
  fi
}

adguard_upstream() {
  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/superman_upstream.conf
  fi

  error_color
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/adguard_upstream.conf /etc/dnsmasq.priv/toggle
  no_color

  if [ "$(is_observer_active "adguard-upstream")" = "active" ]; then
    pause "$WAITING_INTERVAL" "$WAITING_MESSAGE"
  fi

  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/adguard_upstream.conf still doesn't exist" >&2
    no_color
    exit
  fi
}

cloudflare_upstream() {
  if [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/adguard_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/superman_upstream.conf
  fi

  error_color
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/cloudflare_upstream.conf /etc/dnsmasq.priv/toggle
  no_color

  if [ "$(is_observer_active "cloudflare-upstream")" = "active" ]; then
    pause "$WAITING_INTERVAL" "$WAITING_MESSAGE"
  fi

  if [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/adguard_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf still doesn't exist" >&2
    no_color
    exit
  fi
}

nordvpn_upstream() {
  if [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/adguard_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/superman_upstream.conf
  fi

  error_color
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/nordvpn_upstream.conf /etc/dnsmasq.priv/toggle
  no_color

  if [ "$(is_observer_active "nordvpn-upstream")" = "active" ]; then
    pause "$WAITING_INTERVAL" "$WAITING_MESSAGE"
  fi

  if [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/adguard_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf still doesn't exist" >&2
    no_color
    exit
  fi
}

superman_upstream() {
  if [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/adguard_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf
  fi

  error_color
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/superman_upstream.conf /etc/dnsmasq.priv/toggle
  no_color

  if [ "$(is_observer_active "superman-upstream")" = "active" ]; then
    pause "$WAITING_INTERVAL" "$WAITING_MESSAGE"
  fi

  if [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/adguard_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf still exists" >&2
    no_color
    exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman_upstream.conf still doesn't exist" >&2
    no_color
    exit
  fi
}

is_observer_active() {
  systemctl --user is-active "observe-$1-conf"
}

remaining_time() {
  if [ "$reference_minute" -gt 0 ]; then
    remaining-time $reference_minute
  fi

  if [ "$TIMES" != "" ] && [ "$TIMES" -gt "$TIMES_LIMIT" ]; then
    error_color
    echo "error: execution $TIMES_LIMIT times in a row is not allowed" >&2
    no_color
  elif [ "$TIMES" != "" ] && [ "$TIMES" -ge 2 ]; then
    echo
    echo "schedules:"

    # remaining time + 1
    next_in=$(echo \(\($(expr $reference_minute \* 60) - \($(date +%s) % $(expr $reference_minute \* 60)\)\) / 60\) + 1 | bc)

    for i in $(seq 0 $(expr "$TIMES" - 2)); do
      # MEMO: if it's executed at any minute 0 seconds on the dot, the schedule time is shifted by 1 minute
      at_output=$(echo "sleep $TIMES_INTERVAL && $PROG_NAME $service" | at now + $(expr "$next_in" + "$i" \* "$reference_minute") min 2>&1)
      echo "$at_output" | grep -Ev "^warning: commands will be executed using"
    done
  fi
}

pause() {
  duration="$1"
  message="$2"

  if [ "$duration" = 0 ]; then
    return
  fi

  echo "waiting for $duration seconds $message"
  sleep "$1"
}

error_color() {
  # shellcheck disable=SC2059
  printf "$ERROR_COLOR"
}

no_color() {
  # shellcheck disable=SC2059
  printf "$NO_COLOR"
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: unlock [options]... [arguments]..." ''
  msg -- 'Options:'
  flag    DRY_RUN    --dry-run -- "just show remaining time"
  param   TIMES      --times   -- "how many times unlock in a row"
  disp    :usage  -h --help    -- "show help message and exit"
  disp    VERSION    --version -- "show current version"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DRY_RUN=''
TIMES=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--dry-run')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DRY_RUN="$OPTARG"
        ;;
      '--times')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        TIMES="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: unlock [options]... [arguments]...

Options:
      --dry-run               just show remaining time
      --times TIMES           how many times unlock in a row
  -h, --help                  show help message and exit
      --version               show current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
