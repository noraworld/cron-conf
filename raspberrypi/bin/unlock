#!/bin/sh
# shellcheck disable=SC2004

set -u
# trap remaining_time EXIT

PROG_NAME="unlock"
LOG_PATH="/home/ubuntu/.log/unlock.log"

COOLDOWN_INTERVAL=0 # ideal: 10 (this may be unnecessary)
DELAY_INTERVAL=5    # ideal: 5
RETRY_INTERVAL=10   # ideal: 10
TIMES_LIMIT=5       # ideal: 5

COOLDOWN_MESSAGE="to avoid excessive execution"
WAITING_MESSAGE="for the observer daemon to be effective"

ERROR_COLOR="\033[0;31m"
WARNING_COLOR="\033[0;33m"
NO_COLOR="\033[0m"

SKIP=0

main() {
  parse "$@"
  eval "set -- $REST"

  services=$@

  validate "$@"
  log_header "$@"

  if [ "$DELAY" != "" ]; then
    pause "$DELAY" "$COOLDOWN_MESSAGE"
  fi

  log_before_execution "$@"

  for service in $services; do
    reference_minute=0
    # 5 is not enough for observe-dnsmasq-toggle-conf
    waiting_interval=10

    case "$service" in
      "all")
        all
        ;;
      "amazon")
        amazon
        ;;
      "chime")
        chime
        ;;
      "crimson")
        crimson
        ;;
      "deregulated-superman")
        deregulated_superman
        ;;
      "focus")
        focus
        ;;
      "gmail")
        chime
        ;;
      "snorlax")
        snorlax
        ;;
      "maeve")
        maeve
        ;;
      "netflix")
        netflix
        ;;
      "ometeotl")
        ometeotl
        ;;
      "superman")
        superman
        ;;
      "gaming")
        gaming
        ;;
      "vod")
        vod
        ;;
      "youtube")
        youtube
        ;;
      "youtube-alternative")
        youtube_alternative
        ;;
      "youtube-music")
        youtube_music
        ;;
      "adguard-upstream")
        adguard_upstream
        ;;
      "cloudflare-upstream")
        cloudflare_upstream
        ;;
      "nordvpn-upstream")
        nordvpn_upstream
        ;;
      "superman-upstream")
        superman_upstream
        ;;
      *)
        echo "error: no such service $service" >&2
        exit 1
        ;;
    esac
  done

  restart_dnsmasq "$@"
  remaining_time "$@"
  show_directories "$@"

  log_after_execution "$@"
}

restart_dnsmasq() {
  if [ "$NO_RESTART" = 1 ]; then
    echo "restart of dnsmasq won't be executed"
    return
  fi

  echo "restarting dnsmasq"

  if [ "$SKIP" = 1 ]; then
    exrd --log /home/ubuntu/.log/exrd.log --from "$(echo "$PROG_NAME $@")" --skip
  else
    exrd --log /home/ubuntu/.log/exrd.log --from "$(echo "$PROG_NAME $@")"
  fi

  if [ "$(sudo systemctl is-active dnsmasq)" != "active" ]; then
    echo "error: dnsmasq daemon could not restart unexpectedly" >&2
    sudo systemctl status dnsmasq --no-pager >&2
    exit 1
  fi
}

all() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  # for Netflix
  if [ "$VPN" ]; then
    if [ "$RECONNECT_VPN" ]; then
      vpnctl reconnect --status --skipdns
    else
      vpnctl connect --status --skipdns
    fi
  fi

  if [ -L /etc/dnsmasq.toggle/amazon.conf ]; then
    sudo unlink /etc/dnsmasq.toggle/amazon.conf
  fi

  if [ -L /etc/dnsmasq.toggle/chime.conf ]; then
    sudo unlink /etc/dnsmasq.toggle/chime.conf
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/crimson.conf ]; then
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/crimson.conf /etc/dnsmasq.priv/toggle
  fi

  if [ -L /etc/dnsmasq.priv/toggle/deregulated_superman.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/deregulated_superman.conf
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/deregulated_superman_allow.conf ]; then
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/deregulated_superman_allow.conf /etc/dnsmasq.priv/toggle
  fi

  if [ -L /etc/dnsmasq.priv/toggle/focus.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/focus.conf
  fi

  if [ -L /etc/dnsmasq.toggle/snorlax.conf ]; then
    sudo unlink /etc/dnsmasq.toggle/snorlax.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/maeve.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/maeve.conf
  fi

  if [ -L /etc/dnsmasq.toggle/netflix.conf ]; then
    sudo unlink /etc/dnsmasq.toggle/netflix.conf
  fi

  if ! [ -L /etc/dnsmasq.toggle/netflix_allow.conf ]; then
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.toggle/netflix_allow.conf /etc/dnsmasq.toggle
  fi

  if [ -L /etc/dnsmasq.priv/toggle/ometeotl.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/ometeotl.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/superman.conf
  fi

  if [ -L /etc/dnsmasq.toggle/gaming.conf ]; then
    sudo unlink /etc/dnsmasq.toggle/gaming.conf
  fi

  if [ -L /etc/dnsmasq.toggle/vod.conf ]; then
    sudo unlink /etc/dnsmasq.toggle/vod.conf
  fi

  if [ -L /etc/dnsmasq.toggle/youtube.conf ]; then
    sudo unlink /etc/dnsmasq.toggle/youtube.conf
  fi

  if ! [ -L /etc/dnsmasq.toggle/youtube_alternative.conf ]; then
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.toggle/youtube_alternative.conf /etc/dnsmasq.toggle
  fi

  if ! [ -L /etc/dnsmasq.toggle/youtube_music.conf ]; then
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.toggle/youtube_music.conf /etc/dnsmasq.toggle
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/adguard_upstream.conf /etc/dnsmasq.priv/toggle
  fi

  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/superman_upstream.conf
  fi

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.toggle/amazon.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/amazon.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.toggle/chime.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/chime.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/crimson.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/crimson.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/deregulated_superman.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/deregulated_superman.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/deregulated_superman_allow.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/deregulated_superman_allow.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/focus.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/focus.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.toggle/snorlax.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/snorlax.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/maeve.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/maeve.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.toggle/netflix.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/netflix.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if ! [ -L /etc/dnsmasq.toggle/netflix_allow.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/netflix_allow.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/ometeotl.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/ometeotl.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.toggle/gaming.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/gaming.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.toggle/vod.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/vod.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.toggle/youtube.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/youtube.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if ! [ -L /etc/dnsmasq.toggle/youtube_alternative.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/youtube_alternative.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if ! [ -L /etc/dnsmasq.toggle/youtube_music.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/youtube_music.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/adguard_upstream.conf still doesn't exist" >&2
    echo "       create superman_upstream.conf instead so that an upstream DNS will not be lost" >&2
    no_color
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/superman_upstream.conf /etc/dnsmasq.priv/toggle
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    # exit
  fi
}

amazon() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  warning_color
  sudo unlink /etc/dnsmasq.toggle/amazon.conf
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.toggle/amazon.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/amazon.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

chime() {
  reference_minute=5
  waiting_interval=1
  [ "$DRY_RUN" = 1 ] && exit 0

  while [ -L "/etc/dnsmasq.toggle/chime.conf" ]; do
    warning_color
    sudo unlink /etc/dnsmasq.toggle/chime.conf
    no_color

    pause "$waiting_interval" "$WAITING_MESSAGE"
  done

  if [ -L /etc/dnsmasq.toggle/chime.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/chime.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

crimson() {
  reference_minute=10
  waiting_interval=1
  [ "$DRY_RUN" = 1 ] && exit 0

  while ! [ -L "/etc/dnsmasq.priv/toggle/crimson.conf" ]; do
    warning_color
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/crimson.conf /etc/dnsmasq.priv/toggle
    no_color

    pause "$waiting_interval" "$WAITING_MESSAGE"
  done

  if ! [ -L /etc/dnsmasq.priv/toggle/crimson.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/crimson.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

deregulated_superman() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  warning_color
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/deregulated_superman_allow.conf /etc/dnsmasq.priv/toggle
  sudo unlink /etc/dnsmasq.priv/toggle/deregulated_superman.conf
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if ! [ -L /etc/dnsmasq.priv/toggle/deregulated_superman_allow.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/deregulated_superman_allow.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/deregulated_superman.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/deregulated_superman.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

focus() {
  reference_minute=5
  [ "$DRY_RUN" = 1 ] && exit 0

  warning_color
  sudo unlink /etc/dnsmasq.priv/toggle/focus.conf
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.priv/toggle/focus.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/focus.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

snorlax() {
  reference_minute=5
  waiting_interval=1
  [ "$DRY_RUN" = 1 ] && exit 0

  while [ -L "/etc/dnsmasq.toggle/snorlax.conf" ]; do
    warning_color
    sudo unlink /etc/dnsmasq.toggle/snorlax.conf
    no_color

    pause "$waiting_interval" "$WAITING_MESSAGE"
  done

  if [ -L /etc/dnsmasq.toggle/snorlax.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/snorlax.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

maeve() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  warning_color
  sudo unlink /etc/dnsmasq.priv/toggle/maeve.conf
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.priv/toggle/maeve.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/maeve.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

netflix() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  if [ "$VPN" ]; then
    if [ "$RECONNECT_VPN" ]; then
      vpnctl reconnect --status --skipdns
    else
      vpnctl connect --status --skipdns
    fi
  fi

  if ! [ -L /etc/dnsmasq.toggle/netflix_allow.conf ]; then
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.toggle/netflix_allow.conf /etc/dnsmasq.toggle
  fi

  warning_color
  sudo unlink /etc/dnsmasq.toggle/netflix.conf
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if ! [ -L /etc/dnsmasq.toggle/netflix_allow.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/netflix_allow.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.toggle/netflix.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/netflix.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

ometeotl() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  warning_color
  sudo unlink /etc/dnsmasq.priv/toggle/ometeotl.conf
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.priv/toggle/ometeotl.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/ometeotl.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

superman() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  if [ -L /etc/dnsmasq.priv/toggle/maeve.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/maeve.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/deregulated_superman.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/deregulated_superman.conf
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/deregulated_superman_allow.conf ]; then
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/deregulated_superman_allow.conf /etc/dnsmasq.priv/toggle
  fi

  if [ -L /etc/dnsmasq.priv/toggle/ometeotl.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/ometeotl.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/superman_upstream.conf
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/adguard_upstream.conf /etc/dnsmasq.priv/toggle
  fi

  warning_color
  sudo unlink /etc/dnsmasq.priv/toggle/superman.conf
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.priv/toggle/maeve.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/maeve.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/deregulated_superman.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/deregulated_superman.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/deregulated_superman_allow.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/deregulated_superman_allow.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/ometeotl.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/ometeotl.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/adguard_upstream.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

gaming() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  warning_color
  sudo unlink /etc/dnsmasq.toggle/gaming.conf
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.toggle/gaming.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/gaming.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

vod() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  if [ -L /etc/dnsmasq.priv/toggle/ometeotl.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/ometeotl.conf
  fi

  warning_color
  sudo unlink /etc/dnsmasq.toggle/vod.conf
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.priv/toggle/ometeotl.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/ometeotl.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.toggle/vod.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/vod.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

youtube() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  warning_color
  sudo unlink /etc/dnsmasq.toggle/youtube.conf
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.toggle/youtube.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/youtube.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

youtube_alternative() {
  reference_minute=5
  waiting_interval=10
  [ "$DRY_RUN" = 1 ] && exit 0

  warning_color
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.toggle/youtube_alternative.conf /etc/dnsmasq.toggle
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if ! [ -L /etc/dnsmasq.toggle/youtube_alternative.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/youtube_alternative.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

youtube_music() {
  reference_minute=5
  waiting_interval=5
  [ "$DRY_RUN" = 1 ] && exit 0

  warning_color
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.toggle/youtube_music.conf /etc/dnsmasq.toggle
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if ! [ -L /etc/dnsmasq.toggle/youtube_music.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.toggle/youtube_music.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

adguard_upstream() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  warning_color
  sudo unlink /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf
  sudo unlink /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf
  sudo unlink /etc/dnsmasq.priv/toggle/superman_upstream.conf
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/adguard_upstream.conf /etc/dnsmasq.priv/toggle
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/adguard_upstream.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
  fi
}

cloudflare_upstream() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  if [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/adguard_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/superman_upstream.conf
  fi

  warning_color
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/cloudflare_upstream.conf /etc/dnsmasq.priv/toggle
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/adguard_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

nordvpn_upstream() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  if [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/adguard_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/superman_upstream.conf
  fi

  warning_color
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/nordvpn_upstream.conf /etc/dnsmasq.priv/toggle
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/adguard_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

superman_upstream() {
  reference_minute=60
  [ "$DRY_RUN" = 1 ] && exit 0

  if [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/adguard_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    sudo unlink /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf
  fi

  warning_color
  sudo ln -s /home/ubuntu/workspace/dnsmasq-conf/dnsmasq/dnsmasq.priv/toggle/superman_upstream.conf /etc/dnsmasq.priv/toggle
  no_color

  pause "$waiting_interval" "$WAITING_MESSAGE"

  if [ -L /etc/dnsmasq.priv/toggle/adguard_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/adguard_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/cloudflare_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if [ -L /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/nordvpn_upstream.conf still exists" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi

  if ! [ -L /etc/dnsmasq.priv/toggle/superman_upstream.conf ]; then
    error_color
    echo "error: /etc/dnsmasq.priv/toggle/superman_upstream.conf still doesn't exist" >&2
    no_color
    echo "info: dnsmasq.service: $(sudo systemctl is-active dnsmasq)"
    exit
  fi
}

is_observer_active() {
  systemctl --user is-active "observe-$1-conf"
}

remaining_time() {
  if [ "$reference_minute" -le 0 ] && [ "$TIMES" != "" ]; then
    error_color
    echo "error: failed to set schedules because the reference minute is not set on this operation" >&2
    no_color
  elif [ "$reference_minute" -gt 0 ]; then
    remaining-time $reference_minute

    if [ "$TIMES" != "" ] && [ "$TIMES" -gt "$TIMES_LIMIT" ]; then
      error_color
      echo "error: execution more than $TIMES_LIMIT times in a row is not allowed" >&2
      no_color
    elif [ "$TIMES" != "" ] && [ "$TIMES" -ge 1 ]; then
      [ "$VERBOSE" = 1 ] && echo
      [ "$VERBOSE" = 1 ] && echo "schedules:"

      # remaining time + 1
      next_in=$(echo \(\($(expr $reference_minute \* 60) - \($(date +%s) % $(expr $reference_minute \* 60)\)\) / 60\) + 1 | bc)

      for i in $(seq 0 $(expr "$TIMES" - 1)); do
        # MEMO: if it's executed at any minute 0 seconds on the dot, the schedule time is shifted by 1 minute
        if [ "$DEBUG" = 1 ]; then
          at_output1=$(echo "$PROG_NAME $services --skip --delay 1 --debug >> $LOG_PATH 2>&1" |
                       at now + $(expr "$next_in" + "$i" \* "$reference_minute") min 2>&1)
          at_output2=$(echo "$PROG_NAME $services --skip --delay 2 --debug >> $LOG_PATH 2>&1" |
                       at now + $(expr "$next_in" + "$i" \* "$reference_minute") min 2>&1)
          at_output3=$(echo "$PROG_NAME $services --skip --delay 3 --debug >> $LOG_PATH 2>&1" |
                       at now + $(expr "$next_in" + "$i" \* "$reference_minute") min 2>&1)
          at_output4=$(echo "$PROG_NAME $services --skip --delay 4 --debug >> $LOG_PATH 2>&1" |
                       at now + $(expr "$next_in" + "$i" \* "$reference_minute") min 2>&1)
          at_output5=$(echo "$PROG_NAME $services --skip --delay 5 --debug >> $LOG_PATH 2>&1" |
                       at now + $(expr "$next_in" + "$i" \* "$reference_minute") min 2>&1)
        else
          at_output1=$(echo "$PROG_NAME $services --skip --delay 1" |
                       at now + $(expr "$next_in" + "$i" \* "$reference_minute") min 2>&1)
          at_output2=$(echo "$PROG_NAME $services --skip --delay 2" |
                       at now + $(expr "$next_in" + "$i" \* "$reference_minute") min 2>&1)
          at_output3=$(echo "$PROG_NAME $services --skip --delay 3" |
                       at now + $(expr "$next_in" + "$i" \* "$reference_minute") min 2>&1)
          at_output4=$(echo "$PROG_NAME $services --skip --delay 4" |
                       at now + $(expr "$next_in" + "$i" \* "$reference_minute") min 2>&1)
          at_output5=$(echo "$PROG_NAME $services --skip --delay 5" |
                       at now + $(expr "$next_in" + "$i" \* "$reference_minute") min 2>&1)
        fi

        [ "$VERBOSE" = 1 ] && echo "$at_output1" | grep -Ev "^warning: commands will be executed using"
        [ "$VERBOSE" = 1 ] && echo "$at_output2" | grep -Ev "^warning: commands will be executed using"
        [ "$VERBOSE" = 1 ] && echo "$at_output3" | grep -Ev "^warning: commands will be executed using"
        [ "$VERBOSE" = 1 ] && echo "$at_output4" | grep -Ev "^warning: commands will be executed using"
        [ "$VERBOSE" = 1 ] && echo "$at_output5" | grep -Ev "^warning: commands will be executed using"
      done
    fi
  fi
}

show_directories() {
  # https://ubuntuforums.org/showthread.php?t=1203166
  echo && ls --color=auto --literal --time-style=+ -l /etc/dnsmasq.toggle &&
  echo && ls --color=auto --literal --time-style=+ -l /etc/dnsmasq.priv/toggle
}

validate() {
  if [ "$TIMES" != "" ] && [ "$TIMES" -gt "$TIMES_LIMIT" ]; then
    error_color
    echo "error: execution more than $TIMES_LIMIT times in a row is not allowed" >&2
    no_color
    exit 1
  fi
}

log_header() {
  if [ "$DEBUG" != 1 ] || [ "$TIMES" != "" ]; then
    return
  fi

  echo "======================================== START ======================================="
  echo "execute \"$PROG_NAME $@\""
  echo "======================================== date ========================================"
  date
}

log_before_execution() {
  if [ "$DEBUG" != 1 ] || [ "$TIMES" != "" ]; then
    return
  fi

  echo "======================================== date ========================================"
  date
  echo "================================= /etc/dnsmasq.toggle ================================"
  ls /etc/dnsmasq.toggle      | grep --color=always -E "$(echo "$@" | tr '-' '_' )|$"
  echo "============================== /etc/dnsmasq.priv/toggle =============================="
  ls /etc/dnsmasq.priv/toggle | grep --color=always -E "$(echo "$@" | tr '-' '_' )|$"
  echo "============================== main process information =============================="
}

log_after_execution() {
  if [ "$DEBUG" != 1 ] || [ "$TIMES" != "" ]; then
    return
  fi

  echo "======================================== date ========================================"
  date
  echo "================================= /etc/dnsmasq.toggle ================================"
  ls /etc/dnsmasq.toggle      | grep --color=always -E "$(echo "$@" | tr '-' '_' )|$"
  echo "============================== /etc/dnsmasq.priv/toggle =============================="
  ls /etc/dnsmasq.priv/toggle | grep --color=always -E "$(echo "$@" | tr '-' '_' )|$"
  echo "========================================= END ========================================"
  echo
  echo
}

pause() {
  duration="$1"
  message="$2"

  if [ "$duration" = 0 ]; then
    return
  fi

  echo "waiting for $duration seconds $message"
  sleep "$1"
}

error_color() {
  # shellcheck disable=SC2059
  printf "$ERROR_COLOR"
}

warning_color() {
  # shellcheck disable=SC2059
  printf "$WARNING_COLOR"
}

no_color() {
  # shellcheck disable=SC2059
  printf "$NO_COLOR"
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: unlock [options]... [arguments]..." ''
  msg -- 'Options:'
  flag  DEBUG         --debug     -- "write debugging information to a file (disabled if --times is specified)"
  param DELAY         --delay     -- "wait the execution for a given time"
  flag  DRY_RUN       --dry-run   -- "just show remaining time"
  flag  NO_RESTART    --norestart -- "skip to restart the daemon"
  flag  RECONNECT_VPN --reconnect -- "force to reconnect the VPN server"
  flag  SKIP          --skip      -- "skip the first sleep and retry"
  param TIMES         --times     -- "how many times unlock in a row"
  flag  VERBOSE       --verbose   -- "show the redundant information"
  flag  VPN           --vpn       -- "connect to the VPN server (it's currently available only for Netflix)"
  disp  :usage  -h    --help      -- "show help message and exit"
  disp  VERSION       --version   -- "show current version"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DEBUG=''
DELAY=''
DRY_RUN=''
NO_RESTART=''
RECONNECT_VPN=''
SKIP=''
TIMES=''
VERBOSE=''
VPN=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--debug')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DEBUG="$OPTARG"
        ;;
      '--delay')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        DELAY="$OPTARG"
        shift ;;
      '--dry-run')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DRY_RUN="$OPTARG"
        ;;
      '--norestart')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        NO_RESTART="$OPTARG"
        ;;
      '--reconnect')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        RECONNECT_VPN="$OPTARG"
        ;;
      '--skip')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        SKIP="$OPTARG"
        ;;
      '--times')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        TIMES="$OPTARG"
        shift ;;
      '--verbose')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        VERBOSE="$OPTARG"
        ;;
      '--vpn')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        VPN="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: unlock [options]... [arguments]...

Options:
      --debug                 write debugging information to a file (disabled if --times is specified)
      --delay DELAY           wait the execution for a given time
      --dry-run               just show remaining time
      --norestart             skip to restart the daemon
      --reconnect             force to reconnect the VPN server
      --skip                  skip the first sleep and retry
      --times TIMES           how many times unlock in a row
      --verbose               show the redundant information
      --vpn                   connect to the VPN server (it's currently available only for Netflix)
  -h, --help                  show help message and exit
      --version               show current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
