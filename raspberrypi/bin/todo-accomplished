#!/bin/sh

# shellcheck disable=SC2004

LOG_PATH="/home/ubuntu/.log/todo_accomplished.log"
NEW_DAY_OFFSET="9 hours ago"

export GHC_FROM="$(basename "$0") $*"

main() {
  parse "$@"
  eval "set -- $REST"
  validate "$@"

  [ "$PAST"  = "" ] && PAST=0
  [ "$RETRY" = "" ] && RETRY=5
  [ "$SLEEP" = "" ] && SLEEP=3

  if [ "$FORCE" = "1" ]; then
    force="--force"
  else
    force=""
  fi

  count=0
  result="100"
  while [ "$body_with_tasks" = "" ] && [ "$count" -lt "$RETRY" ]; do
    if [ "$PAST" -eq 0 ] || [ "$INCLUDE_TODAY" = "1" ]; then
      body_with_tasks=$(todo-cache --repo "$REPO" --date "$(date -d "$NEW_DAY_OFFSET" +%F)" "$force")
      body_without_tasks=$(echo "$body_with_tasks" | awk '!found {print} /## 🐯 今日やること/ {found=1}')

      checked_count=$(  echo "$body_with_tasks"    | grep -c "\[x\]")
      unchecked_count=$(echo "$body_without_tasks" | grep -c "\[ \]")

      result=$(judge "$checked_count" "$unchecked_count" "$body_with_tasks")
    fi

    if [ "$PAST" -ge 1 ]; then
      for i in $(seq 1 "$PAST"); do
        body_with_tasks=$(todo-cache --repo "$REPO" --date "$(date -d "$i days ago $NEW_DAY_OFFSET" +%F)" "$force")
        body_without_tasks=$(echo "$body_with_tasks" | awk '!found {print} /## 🐯 今日やること/ {found=1}')

        checked_count=$(  echo "$body_with_tasks"    | grep -c "\[x\]")
        unchecked_count=$(echo "$body_without_tasks" | grep -c "\[ \]")

        tmp_result=$(judge "$checked_count" "$unchecked_count" "$body_with_tasks")
        if [ "$tmp_result" -lt "$result" ]; then
          result="$tmp_result"
        fi
      done
    fi

    if [ "$body_with_tasks" != "" ]; then
      break
    fi

    count=$(($count + 1))
    [ "$count" -ge "$RETRY" ] && break
    sleep "$SLEEP"
  done

  if [ "$result" != "100" ]; then
    echo "$result"
  else
    echo "something went wrong" >&2
    result="-2"
    echo "-2"
  fi

  echo "[$(date '+%Y-%m-%dT%H:%M:%S%z')] Invoked GitHub API with result \"$result\"" >> "$LOG_PATH"

  if [ "$result" -ge 1 ]; then
    exit 0
  else
    exit 1
  fi
}

judge() {
  if [ "$3" = "" ]; then
    echo "0"
  elif {
    [ "$CHECKED"   != "" ] &&
    [ "$UNCHECKED" != "" ] &&
    [ "$1" -ge "$CHECKED" ] &&
    [ "$2" -le "$UNCHECKED" ];
  } || {
    [ "$CHECKED"   != "" ] &&
    [ "$UNCHECKED"  = "" ] &&
    [ "$1" -ge "$CHECKED" ];
  } || {
    [ "$UNCHECKED" != "" ] &&
    [ "$CHECKED"    = "" ] &&
    [ "$2" -le "$UNCHECKED" ];
  }; then
    echo "1"
  else
    echo "-1"
  fi
}

validate() {
  if [ "$REPO" = "" ]; then
    echo "error: --repo is missing" >&2
    exit 1
  fi

  if [ "$CHECKED" = "" ] && [ "$UNCHECKED" = "" ]; then
    echo "error: both --checked and --unchecked not specified is not acceptable" >&2
    exit 1
  fi
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: todo-accomplished [options]... [arguments]..." ''
  msg -- 'Options:'
  param CHECKED          --checked       -- "count how many to-dos have been accomplished (it is possible to use this with --unchecked together)"
  flag  FORCE            --force         -- "get content from APIs even if cache exists"
  flag  INCLUDE_TODAY    --include-today -- "whether to include today's task (only enabled when --past)"
  param PAST             --past          -- "determine whether to check the past list as well and specify how many days to go back"
  param REPO             --repo          -- "a target repository name"
  param RETRY            --retry         -- "how many times to retry"
  param SLEEP            --sleep         -- "how many seconds to wait before retrying the next one"
  param UNCHECKED        --unchecked     -- "count how many to-dos have NOT been accomplished yet (it is possible to use this with --checked together)"
  disp  :usage        -h --help          -- "show help message and exit"
  disp  VERSION          --version       -- "show current version"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
CHECKED=''
FORCE=''
INCLUDE_TODAY=''
PAST=''
REPO=''
RETRY=''
SLEEP=''
UNCHECKED=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--checked')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        CHECKED="$OPTARG"
        shift ;;
      '--force')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        FORCE="$OPTARG"
        ;;
      '--include-today')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        INCLUDE_TODAY="$OPTARG"
        ;;
      '--past')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        PAST="$OPTARG"
        shift ;;
      '--repo')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        REPO="$OPTARG"
        shift ;;
      '--retry')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        RETRY="$OPTARG"
        shift ;;
      '--sleep')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        SLEEP="$OPTARG"
        shift ;;
      '--unchecked')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        UNCHECKED="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: todo-accomplished [options]... [arguments]...

Options:
      --checked CHECKED       count how many to-dos have been accomplished (it is possible to use this with --unchecked together)
      --force                 get content from APIs even if cache exists
      --include-today         whether to include today's task (only enabled when --past)
      --past PAST             determine whether to check the past list as well and specify how many days to go back
      --repo REPO             a target repository name
      --retry RETRY           how many times to retry
      --sleep SLEEP           how many seconds to wait before retrying the next one
      --unchecked UNCHECKED   count how many to-dos have NOT been accomplished yet (it is possible to use this with --checked together)
  -h, --help                  show help message and exit
      --version               show current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
