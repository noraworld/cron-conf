#!/bin/sh

# shellcheck disable=SC2004

LOG_PATH="/home/ubuntu/.log/todo_accomplished.log"

export GHC_FROM="$(basename "$0") $*"

main() {
  parse "$@"
  eval "set -- $REST"
  validate "$@"

  [ "$PAST"  = "" ] && PAST=0
  [ "$RETRY" = "" ] && RETRY=5
  [ "$SLEEP" = "" ] && SLEEP=3

  count=0
  while [ "$body" = "" ] && [ "$count" -lt "$RETRY" ]; do
    body=$(ghc issue view --repo "$REPO" "$(ghc issue list --repo "$REPO" --limit 1 | awk '{ print $1 }')" --json body --jq .body)

    if [ "$PAST" -ge 1 ]; then
      past_body=$(ghc issue list --repo "$REPO" --state "closed" --limit "$PAST" | awk '{ print $1 }' |
                  xargs --max-args=1 --open-tty ghc issue view --repo "$REPO" --json body --jq .body)
    fi

    if [ "$body" != "" ]; then
      if [ "$PAST" -ge 1 ]; then
        if [ "$past_body" != "" ]; then
          break
        fi
      else
        break
      fi
    fi

    count=$(($count + 1))
    [ "$count" -ge "$RETRY" ] && break
    sleep "$SLEEP"
  done

  checked_count=$(  echo "$body" | grep -c "\[x\]")
  unchecked_count=$(echo "$body" | grep -c "\[ \]")
  result="unknown"

  if [ "$body" = "" ] || { [ "$PAST" -ge 1 ] && [ "$past_body" = "" ]; }; then
    result="failed to fetch"
    echo "0"
  elif [ "$PAST" -ge 1 ] && [ "$past_body" != "" ] && [ "$(echo "$past_body" | grep -c "\[ \]")" -ne 0 ]; then
    result="not accomplished in the past"
    echo "-1"
  elif {
    [ "$CHECKED"   != "" ]                &&
    [ "$UNCHECKED" != "" ]                &&
    [ "$checked_count"   -ge "$CHECKED" ] &&
    [ "$unchecked_count" -le "$UNCHECKED" ];
  } || {
    [ "$CHECKED"   != "" ] &&
    [ "$UNCHECKED"  = "" ] &&
    [ "$checked_count" -ge "$CHECKED" ];
  } || {
    [ "$UNCHECKED" != "" ] &&
    [ "$CHECKED"    = "" ] &&
    [ "$unchecked_count" -le "$UNCHECKED" ];
  }; then
    result="accomplished"
    echo "1"
  else
    result="not accomplished"
    echo "-1"
  fi

  echo "[$(date '+%Y-%m-%dT%H:%M:%S%z')] Invoked GitHub API with result \"$result\"" >> "$LOG_PATH"

  if [ "$result" = "accomplished" ]; then
    exit 0
  else
    exit 1
  fi
}

validate() {
  if [ "$REPO" = "" ]; then
    echo "error: --repo is missing" >&2
    exit 1
  fi

  if [ "$CHECKED" = "" ] && [ "$UNCHECKED" = "" ]; then
    echo "error: both --checked and --unchecked not specified is not acceptable" >&2
    exit 1
  fi
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: todo-accomplished [options]... [arguments]..." ''
  msg -- 'Options:'
  param   CHECKED      --checked   -- "count how many to-dos have been accomplished (it is possible to use this with --unchecked together)"
  param   PAST         --past      -- "determine whether to check the past list as well and specify how many days to go back"
  param   REPO         --repo      -- "a target repository name"
  param   RETRY        --retry     -- "how many times to retry"
  param   SLEEP        --sleep     -- "how many seconds to wait before retrying the next one"
  param   UNCHECKED    --unchecked -- "count how many to-dos have NOT been accomplished yet (it is possible to use this with --checked together)"
  disp    :usage    -h --help      -- "show help message and exit"
  disp    VERSION      --version   -- "show current version"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
CHECKED=''
PAST=''
REPO=''
RETRY=''
SLEEP=''
UNCHECKED=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--checked')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        CHECKED="$OPTARG"
        shift ;;
      '--past')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        PAST="$OPTARG"
        shift ;;
      '--repo')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        REPO="$OPTARG"
        shift ;;
      '--retry')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        RETRY="$OPTARG"
        shift ;;
      '--sleep')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        SLEEP="$OPTARG"
        shift ;;
      '--unchecked')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        UNCHECKED="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: todo-accomplished [options]... [arguments]...

Options:
      --checked CHECKED       count how many to-dos have been accomplished (it is possible to use this with --unchecked together)
      --past PAST             determine whether to check the past list as well and specify how many days to go back
      --repo REPO             a target repository name
      --retry RETRY           how many times to retry
      --sleep SLEEP           how many seconds to wait before retrying the next one
      --unchecked UNCHECKED   count how many to-dos have NOT been accomplished yet (it is possible to use this with --checked together)
  -h, --help                  show help message and exit
      --version               show current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
