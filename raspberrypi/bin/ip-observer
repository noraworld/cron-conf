#!/bin/sh
# shellcheck disable=SC2004

set -eu

LOG_PATH="/home/ubuntu/.log/ip-observer"

main() {
  parse "$@"
  eval "set -- $REST"

  routing_exists
  networkd_aliver
  addresses_exist

  if [ "$DEBUG" = 1 ]; then
    print_log "0" "nothing wrong was detected"
  fi
}

routing_exists() {
  if [ "$(ip route show)" = "" ]; then
    sudo netplan apply

    print_log "1" "routing was lost"
  fi
}

networkd_aliver() {
  if [ "$(systemctl is-enabled systemd-networkd)" != "enabled" ] ||
     [ "$(systemctl is-active  systemd-networkd)" != "active"  ]; then
    sudo systemctl unmask systemd-networkd
    sudo systemctl enable systemd-networkd
    sudo systemctl start systemd-networkd

    print_log "2" "systemd-networkd was not active or enabled"
  fi
}

addresses_exist() {
  expected_wifi_ip=$(netplan get ethernets.wlan0.addresses | grep -oE "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[^255]")
  actual_wifi_ip=$(ip -f inet address show wlan0 | grep -oE "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[^255]")

  if [ "$expected_wifi_ip" != "$actual_wifi_ip" ]; then
    sudo netplan apply

    print_log "3" "expected Wi-Fi IP address did not match actual one"
  fi
}

print_log() {
  echo "{ \"code\": $1, \"date\": \"$(date)\", \"reason\": \"$2\" }," >> "$LOG_PATH"
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: ip-observer [options]... [arguments]..." ''
  msg -- 'Options:'
  flag    DEBUG   -d --debug   -- "debug mode"
  disp    :usage  -h --help
  disp    VERSION    --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DEBUG=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[dh]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '-d'|'--debug')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DEBUG="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: ip-observer [options]... [arguments]...

Options:
  -d, --debug                 debug mode
  -h, --help
      --version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
