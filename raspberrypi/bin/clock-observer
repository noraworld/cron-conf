#!/bin/sh

set -eu

# How to make time lag intentionally
#   sudo timedatectl set-ntp off
#   sudo date --set "Mon, 15 Aug 2022 18:05:00 GMT"

AFTER_NTP_INTERVAL=10
AFTER_SYNCHRONIZATION_INTERVAL=10
LOG_PATH=$HOME/.log/clock-observer.log
TIME_FORMAT_REGEX='^(Sun|Mon|Tue|Wed|Thu|Fri|Sat), [0-9]{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} GMT$'
SLEEP_INTERVAL=5
RETRY_SHRESHOLD=5

main() {
  log_flag=false

  check_ntp_status
  check_synchronization
  check_remote_server

  if $log_flag; then
    echo "============================ Local time:  $local_time ============================" >> "$LOG_PATH"

    if [ "$(echo "$remote_time" | grep -cE "$TIME_FORMAT_REGEX")" -eq 1 ]; then
      echo "============================ Remote time: $remote_time ============================" >> "$LOG_PATH"
    else
      echo "============================ Remote time: (Failed to retrieve properly) ============================" >> "$LOG_PATH"
    fi

    echo >> "$LOG_PATH"
    echo >> "$LOG_PATH"
    echo "====================================================================================================" >> "$LOG_PATH"
    echo "====================================================================================================" >> "$LOG_PATH"
  fi
}

check_ntp_status() {
  if [ "$(timedatectl | grep -c "NTP service: active")" -eq 0 ]; then
    log_flag=true
    echo "INFO: NTP service is inactive. Turning it on automatically..." >> "$LOG_PATH"
    sudo timedatectl set-ntp on
    sleep "$AFTER_NTP_INTERVAL"
  fi
}

check_synchronization() {
  if [ "$(timedatectl | grep -c "System clock synchronized: yes")" -eq 0 ]; then
    log_flag=true
    echo "INFO: System clock synchronization does not seem to be working. Waiting for a while..." >> "$LOG_PATH"
    sleep "$AFTER_SYNCHRONIZATION_INTERVAL"
  fi
}

check_remote_server() {
  get_local_time
  get_remote_time

  # Validate time format
  if [ "$(echo "$remote_time" | grep -cE "$TIME_FORMAT_REGEX")" -eq 0 ]; then
    log_flag=true
    echo "ERROR: Failed to retrieve remote time properly." >> "$LOG_PATH"
    echo "       Remote time: \"$remote_time\"" >> "$LOG_PATH"
  elif [ "$local_time_without_second_and_tz" != "$remote_time_without_second_and_tz" ]; then
    log_flag=true

    {
      echo "WARNING: Local time and remote time did not match!"
      echo "         Local time before fixed: $local_time"
      echo "         Remote time:             $remote_time"
    } >> "$LOG_PATH"

    sudo date --set "$remote_time" > /dev/null
    get_local_time

    echo "         Local time after fixed:  $local_time" >> "$LOG_PATH"
  fi
}

get_local_time() {
  # Fri, 19 Aug 2022 16:12:11 GMT
  local_time=$(env LANG=en_US.UTF-8 TZ=GMT date "+%a, %d %b %G %T %Z")

  # Fri, 19 Aug 2022 16:12
  local_time_without_second_and_tz=$(echo "$local_time" | sed -r 's/:[0-9][0-9] GMT$//g')
}

get_remote_time() {
  # Fri, 19 Aug 2022 16:12:11 GMT
  #   Do not change to HTTPS!
  #   https://qiita.com/kkdd/items/fdf501e9e6a03ad925d6
  #   https://teratail.com/questions/329775
  remote_time=$(curl -s --head http://www.google.com | grep -i '^date' | tr -d '\r' | cut -b 7-)

  # Retry to retrieve remote time if it fails
  i=0
  while [ "$i" -lt "$RETRY_SHRESHOLD" ] && [ "$(echo "$remote_time" | grep -cE "$TIME_FORMAT_REGEX")" -eq 0 ]; do
    sleep "$SLEEP_INTERVAL"
    remote_time=$(curl -s --head http://www.google.com | grep -i '^date' | tr -d '\r' | cut -b 7-)
    i=$(expr $i + 1)
  done

  # Fri, 19 Aug 2022 16:12
  remote_time_without_second_and_tz=$(echo "$remote_time" | sed -r 's/:[0-9][0-9] GMT$//g')
}

main
