#!/bin/sh
# shellcheck disable=SC2004

DEBUG_LOG_PATH="/home/ubuntu/.log/observe_firewall_debug.log"

main() {
  parse "$@"
  eval "set -- $REST"

  operation="$1"

  case "$operation" in
    "deny")
      deny "$@"
      ;;
    "allow")
      # "observe-firewall allow" is used by "observe-dnsmasq-toggle-conf"
      # authenticate
      allow "$@"
      ;;
    "check")
      check "$@"
      ;;
    *)
      echo "error: no such operation: \"$operation\"" >&2
      exit 1
      ;;
  esac
}

deny() {
  if ! eval "$(port_blocked)" || ! eval "$(github_blocked)"; then
    restore_rules
    restrict_github

    if [ "$SAFE" != 1 ]; then
      punish "$@"
    fi
  fi
}

allow() {
  if eval "$(github_blocked)"; then
    restore_rules
  fi
}

check() {
  if [ "$(port_blocked)" = "false" ]; then
    echo "-1"
    return
  fi

  if [ "$(github_blocked)" = "false" ]; then
    echo "-1"
    return
  fi

  echo "1"
  return
}

restore_rules() {
  # Reset all rules
  printf "*filter\nCOMMIT\n*nat\nCOMMIT\n" | sudo iptables-restore

  # Apply UFW rules
  #   https://github.com/noraworld/ufw-conf
  sudo ufw reload
}

restrict_github() {
  # Retrieve all IP addresses for GitHub and extract ones used for "git"
  github_git_addresses=$(curl -s https://api.github.com/meta | tr -d '\n' | grep -oP "\"git\": \[(.*?)\]" | sed 's/"git": \[//g' | tr -d ']' | tr -d '"' | tr -d ' ')

  # Check syntax
  # Do not encompass the command with double quotes
  # shellcheck disable=SC2046
  if [ $(echo "$github_git_addresses" | grep -coP "(([0-9]{1,3}\.){3}[0-9]{1,3}(/[0-9]{1,2})?|[0-f]{1,4}:{1,2}[0-f]{1,4}:{1,2}(/[0-9]{1,2})?),?") -ne 1 ]; then
    [ "$DEBUG" = 1 ] && echo "{ \"code\": 5, \"date\": \"$(date)\", \"reason\": \"tentative IP addresses were assigned\" }," >> "$DEBUG_LOG_PATH"

    # If it fails to get correct values, assign tentative IP addresses as of June 4, 2023
    #
    # This shouldn't be used because the IP addresses are subject to change.
    # In fact, they have actually been changed in the past three months. (June 4 - Sep 21, 2023)
    # In other words, if this assignment is invoked,
    # the communication to GitHub with the Git protocol is less likely to be blocked.
    github_git_addresses="192.30.252.0/22,185.199.108.0/22,140.82.112.0/20,143.55.64.0/20,2a0a:a440::/29,2606:50c0::/32,20.201.28.151/32,20.205.243.166/32,20.87.225.212/32,20.248.137.48/32,20.207.73.82/32,20.27.177.113/32,20.200.245.247/32,20.233.54.53/32,20.201.28.152/32,20.205.243.160/32,20.87.225.214/32,20.248.137.50/32,20.207.73.83/32,20.27.177.118/32,20.200.245.248/32,20.233.54.52/32"
  fi

  # e.g. 192.30.252.0/22,185.199.108.0/22,140.82.112.0/20,143.55.64.0/20,20.201.28.151/32,20.205.243.166/32,20.87.225.212/32,20.248.137.48/32,20.207.73.82/32,20.27.177.113/32,20.200.245.247/32,20.233.54.53/32,20.201.28.152/32,20.205.243.160/32,20.87.225.214/32,20.248.137.50/32,20.207.73.83/32,20.27.177.118/32,20.200.245.248/32,20.233.54.52/32
  github_git_ip4addresses=$(echo "$github_git_addresses" | perl -pe 's|[0-f]{1,4}:{1,2}[0-f]{1,4}.*?,||g')

  # e.g. 2a0a:a440::/29,2606:50c0::/32
  github_git_ip6addresses=$(echo "$github_git_addresses" | grep -oP "[0-f]{1,4}:{1,2}.*?," | tr -d '\n' | sed 's/,$/\n/g')

  # Block "git push" & "git pull" (only on this computer)
  # Try "git pull" at any Git directory to make sure if it works properly
  sudo iptables  -I OUTPUT -p all -d "$github_git_ip4addresses" -j REJECT
  sudo ip6tables -I OUTPUT -p all -d "$github_git_ip6addresses" -j REJECT
}

port_blocked() {
  # Avoid invalid context length argument with grep
  #   https://stackoverflow.com/a/34077672/13999144

  # Check if the drop rules against the port 53 & 51,820 forwarding exist
  if [ "$(sudo iptables-save |
          grep -cE "\-A ufw-user-forward -p (tcp|udp) -m (tcp|udp) --dport (53|51820) -j DROP")" -ne 4 ];
  then
    [ "$DEBUG" = 1 ] && echo "{ \"code\": 9, \"date\": \"$(date)\", \"reason\": \"drop rules not found\" }," >> "$DEBUG_LOG_PATH"
    echo false
    return
  fi

  echo true
}

github_blocked() {
  # Check if the GitHub IP addresses for "git push" & "git pull" are blocked
  # MEMO: "ssh -T git@github.com" can't be used because it always returns a non-zero status, even if the result succeeds
  if git -C /home/ubuntu/workspace/cron-conf fetch > /dev/null 2>&1; then
    if [ "$DEBUG" = 1 ] && [ "$SAFE" != 1 ]; then
      echo "{ \"code\": 4, \"date\": \"$(date)\", \"reason\": \"git operation with remote repos not blocked\" }," >> "$DEBUG_LOG_PATH"
    fi

    echo false
    return
  fi

  echo true
}

punish() {
  sh -c "/home/ubuntu/workspace/cron-conf/bin/lib/punish --from \"$(echo "$(basename "$0")" "$*" | sed -r 's/\s$//g')\""
}

authenticate() {
  IS_CRON_SCRIPT=/home/ubuntu/workspace/cron-conf/bin/lib/is-cron

  if [ "$(sh -c "$IS_CRON_SCRIPT")" = false ]; then
    echo "Fatal: This operation must be executed by cron, or this script does not take enough effect" >&2
    exit 2
  fi
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: observe-firewall [options]... [arguments]..." ''
  msg -- 'Options:'
  flag    DEBUG      --debug   -- "run while showing debug information"
  flag    SAFE       --safe    -- "not getting punished"
  disp    :usage  -h --help    -- "show help message and exit"
  disp    VERSION    --version -- "show current version"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DEBUG=''
SAFE=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--debug')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DEBUG="$OPTARG"
        ;;
      '--safe')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        SAFE="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: observe-firewall [options]... [arguments]...

Options:
      --debug                 run while showing debug information
      --safe                  not getting punished
  -h, --help                  show help message and exit
      --version               show current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
