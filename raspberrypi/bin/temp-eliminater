#!/bin/sh

grep_temp_regex="^\s*#TEMP|^\s*#TMP"
sed_temp_regex="^\s*#TEMP\|^\s*#TMP"
interval="3"
commit_message="Enable temp"

main() {
  parse "$@"
  eval "set -- $REST"

  if [ "$(count_temp)" -eq 0 ]; then
    [ "$VERBOSE" = 1 ] && echo "no temp"
    exit 0
  fi

  stop_daemons
  eliminate_temp
  commit_changes

  if [ "$VERBOSE" = 1 ]; then
    echo "wait for $interval seconds..."
    sleep "$interval"

    if [ "$(count_temp)" -ne 0 ]; then
      echo "temp still exists"
      exit 1
    fi
  fi
}

count_temp() {
  rg --files-with-matches --hidden --glob '!.git' "$grep_temp_regex"  \
    "/home/ubuntu/workspace/cron-conf"                                \
    "/home/ubuntu/workspace/dnsmasq-conf/dnsmasq"                     \
    "/home/ubuntu/workspace/envsman/raspberrypi/dnsmasq/dnsmasq.priv" \
    "/home/ubuntu/workspace/ufw-conf"                                 |
    wc -l
}

eliminate_temp() {
  rg --files-with-matches --hidden --glob '!.git' "$grep_temp_regex"  \
    "/home/ubuntu/workspace/cron-conf"                                \
    "/home/ubuntu/workspace/dnsmasq-conf/dnsmasq"                     \
    "/home/ubuntu/workspace/envsman/raspberrypi/dnsmasq/dnsmasq.priv" \
    "/home/ubuntu/workspace/ufw-conf"                                 |
    xargs -I {} sed -i "s/$sed_temp_regex//g" {}
}

commit_changes() {
  git -C "/home/ubuntu/workspace/cron-conf" add --all
  git -C "/home/ubuntu/workspace/cron-conf" commit -m "$commit_message"
  git -C "/home/ubuntu/workspace/cron-conf" push --set-upstream origin main

  git -C "/home/ubuntu/workspace/dnsmasq-conf/dnsmasq" add --all
  git -C "/home/ubuntu/workspace/dnsmasq-conf/dnsmasq" commit -m "$commit_message"
  git -C "/home/ubuntu/workspace/dnsmasq-conf/dnsmasq" push --set-upstream origin main

  git -C "/home/ubuntu/workspace/envsman/raspberrypi/dnsmasq/dnsmasq.priv" add --all
  git -C "/home/ubuntu/workspace/envsman/raspberrypi/dnsmasq/dnsmasq.priv" commit -m "$commit_message"
  git -C "/home/ubuntu/workspace/envsman/raspberrypi/dnsmasq/dnsmasq.priv" push --set-upstream origin main

  git -C "/home/ubuntu/workspace/ufw-conf" add --all
  git -C "/home/ubuntu/workspace/ufw-conf" commit -m "$commit_message"
  git -C "/home/ubuntu/workspace/ufw-conf" push --set-upstream origin main
}

stop_daemons() {
  systemctl --user stop observe-firewall
  systemctl --user stop observe-crontab
  systemctl --user stop observe-cron-conf
  systemctl --user stop observe-dnsmasq-conf
  systemctl --user stop observe-dnsmasq-priv-conf
  systemctl --user stop observe-dnsmasq-toggle
  systemctl --user stop observe-dnsmasq-priv-toggle
  systemctl --user stop observe-dnsmasq-todo-list
  systemctl --user stop observe-dnsmasq-priv-todo-list
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: example.sh [options]... [arguments]..." ''
  msg -- 'Options:'
  flag VERBOSE    --verbose -- "verbose output"
  disp :usage  -h --help
  disp VERSION    --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
VERBOSE=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--verbose')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        VERBOSE="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: example.sh [options]... [arguments]...

Options:
      --verbose               verbose output
  -h, --help
      --version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
