#!/bin/sh

LOG_PATH="/home/ubuntu/workspace/log/pi/log/daemon_health.log"
NORMAL_COLOR="\033[0m"
STATE_PATH="/home/ubuntu/workspace/log/pi/tmp/daemon_health"

main() {
  parse "$@"
  eval "set -- $REST"

  validate
  setup

  sleep "$CHECK_DELAY"

  echo "$DAEMONS" | tr ',' '\n' | while read -r daemon; do
    check_daemon "$daemon"
  done
}

check_daemon() {
  count=$(cat "$STATE_PATH/$1" 2>/dev/null || echo 0)

  if [ "$(systemctl is-active "$1")" != "active" ]; then
    count=$(( count + 1 ))
    print_log "warning" "$1 daemon was not active (count = $count)"
    echo "$count" > "$STATE_PATH/$1"
  else
    if [ "$count" -ne 0 ]; then
      count=0
      print_log "info" "   $1 daemon count was reset"
      echo 0 > "$STATE_PATH/$1"
    fi
  fi

  if [ "$count" -ge "$REBOOT_THRESHOLD" ]; then
    print_log "fatal" "  $1 daemon was not active for $count times. rebooting..."
    echo 0 > "$STATE_PATH/$1"
    sudo reboot
  elif [ "$count" -ge "$DAEMON_RESTART_THRESHOLD" ]; then
    print_log "fatal" "  $1 daemon was not active for $count times. restarting the daemon..."
    sudo systemctl start "$1"
  fi
}

print_log() {
  echo "$(eval "$1")[$(date '+%Y-%m-%dT%H:%M:%S%z')] $(echo "$1" | tr '[:lower:]' '[:upper:]'): $2$NORMAL_COLOR" >> "$LOG_PATH"
}

fatal() {
  echo "\033[31m"
}

info() {
  echo "\033[34m"
}

warning() {
  echo "\033[33m"
}

setup() {
  [ -e "$STATE_PATH" ] || mkdir "$STATE_PATH"
}

validate() {
  if [ "$DAEMONS" = "" ]; then
    echo "--daemons was not specified" >&2
    exit 1
  fi

  if ! $(echo "$DAEMON_RESTART_THRESHOLD" | grep -E "^[0-9]+$" 1>/dev/null 2>/dev/null); then
    echo "--daemon-restart-threshold was not specified or not a number" >&2
    exit 1
  fi

  if ! $(echo "$REBOOT_THRESHOLD" | grep -E "^[0-9]+$" 1>/dev/null 2>/dev/null); then
    echo "--reboot-threshold was not specified or not a number" >&2
    exit 1
  fi

  if [ "$REBOOT_THRESHOLD" -le "$DAEMON_RESTART_THRESHOLD" ]; then
    echo "--reboot-threshold was less than or equal to --daemon-restart-threshold" >&2
    exit 1
  fi

  if ! $(echo "$CHECK_DELAY" | grep -E "^[0-9]+$" 1>/dev/null 2>/dev/null); then
    CHECK_DELAY="0"
  fi
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: daemon-health [options]... [arguments]..." ''
  msg -- 'Options:'
  param   CHECK_DELAY                 --check-delay              -- "wait for specified seconds before checking"
  param   DAEMONS                     --daemons                  -- "restart specific daemons"
  param   DAEMON_RESTART_THRESHOLD    --daemon-restart-threshold -- "restart daemons after specified times"
  param   REBOOT_THRESHOLD            --reboot-threshold         -- "reboot after specified times"
  disp    :usage                   -h --help
  disp    VERSION                     --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
CHECK_DELAY=''
DAEMONS=''
DAEMON_RESTART_THRESHOLD=''
REBOOT_THRESHOLD=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ "${REST}" != x ] && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        case $2 in --*) set -- "$1" unknown "$2" && REST=x; esac;OPTARG= ;;
    esac
    case $1 in
      '--check-delay')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        CHECK_DELAY="$OPTARG"
        shift ;;
      '--daemons')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        DAEMONS="$OPTARG"
        shift ;;
      '--daemon-restart-threshold')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        DAEMON_RESTART_THRESHOLD="$OPTARG"
        shift ;;
      '--reboot-threshold')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        REBOOT_THRESHOLD="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: daemon-health [options]... [arguments]...

Options:
      --check-delay CHECK_DELAY
                              wait for specified seconds before checking
      --daemons DAEMONS       restart specific daemons
      --daemon-restart-threshold DAEMON_RESTART_THRESHOLD
                              restart daemons after specified times
      --reboot-threshold REBOOT_THRESHOLD
                              reboot after specified times
  -h, --help
      --version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
