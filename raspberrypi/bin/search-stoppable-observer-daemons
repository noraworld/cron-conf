#!/bin/sh
# shellcheck disable=SC2004

OBSERVE_FILES="/home/ubuntu/workspace/systemd-units/lib/systemd/user/observer/*"
SCHEDULER_FILE="/home/ubuntu/workspace/cron-conf/raspberrypi/bin/scheduler"
XDG_RUNTIME_DIR="/run/user/$(id -u)"

main() {
  export XDG_RUNTIME_DIR # for cron
  parse "$@"
  eval "set -- $REST"

  if [ "$DELAY" != "" ]; then
    sleep "$DELAY"
  fi

  echo "Here is a list of observer daemons that can be stopped safely."
  echo "You may need to stop these daemons after the system reboots, as they start automatically even though they are unnecessary."

  for conf in $OBSERVE_FILES; do
    conf=$(basename "${conf%.*}")

    if [ "$(grep -E "cron-daemonctl.*$conf" $SCHEDULER_FILE | grep -cEv "\s*#")" -eq 0 ]; then
      daemons="$daemons\n$conf"
    fi
  done

  echo "$daemons"
  echo

  if [ "$WITHOUT_CONFIRMATION" = 1 ]; then
    confirm="yes"
  else
    printf "Would you like to turn them off? [y/N/s/?]: "
    exec < /dev/tty
    read -r confirm
  fi

  if [ "$confirm" = "y" ] || [ "$confirm" = "yes" ]; then
    echo "$daemons" | while read -r daemon; do
      [ "$daemon" = "" ] && continue

      systemctl --user stop "$daemon"

      if [ "$(systemctl --user is-active "$daemon")" != "inactive" ]; then
        echo "warning: $daemon is not inactive!" >&2
      fi
    done

    [ "$WITHOUT_CONFIRMATION" = 1 ] || echo
    echo "If nothing shows above, all the daemons are now inactive!"
  elif [ "$confirm" = "s" ] || [ "$confirm" = "show" ]; then
    echo
    echo "$daemons" | while read -r daemon; do
      [ "$daemon" = "" ] && continue

      printf '%s: ' "$daemon"
      colorize "$(systemctl --user is-active "$daemon")"
    done
  else
    echo "OK, I won't, but let me show you the commands to stop them."
    echo
    echo "$daemons" | xargs -I {} echo "systemctl --user stop {}; systemctl --user is-active {}"
  fi
}

colorize() {
  if [ "$1" = "inactive" ]; then
    echo "\e[1;32m$1\e[0m"
  elif [ "$1" = "active" ]; then
    echo "\e[1;31m$1\e[0m"
  else
    echo "$1"
  fi
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: search-stoppable-observer-daemons [options]... [arguments]..." ''
  msg -- 'Options:'
  flag    WITHOUT_CONFIRMATION    --skip    -- "do not confirm before execution"
  param   DELAY                   --delay   -- "wait for the specified time"
  disp    :usage               -h --help    -- "show the help message and exit"
  disp    VERSION                 --version -- "show the current version"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
WITHOUT_CONFIRMATION=''
DELAY=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--skip')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        WITHOUT_CONFIRMATION="$OPTARG"
        ;;
      '--delay')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        DELAY="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: search-stoppable-observer-daemons [options]... [arguments]...

Options:
      --skip                  do not confirm before execution
      --delay DELAY           wait for the specified time
  -h, --help                  show the help message and exit
      --version               show the current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
