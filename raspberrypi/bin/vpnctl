#!/bin/sh
# shellcheck disable=SC2004

set -eu

DEFAULT_MY_COUNTRY="jp"
DEFAULT_TARGET_COUNTRY="ca"
DEFAULT_RETRY_THRESHOLD="5"
DEFAULT_SLEEP_INTERVAL="3"

main() {
  parse "$@"
  eval "set -- $REST"
  set_var "$@"

  case "$operation" in
    "connect")
      connect
      ;;
    "connected")
      connected
      ;;
    "disconnect")
      disconnect
      ;;
    "disconnected")
      disconnected
      ;;
    "reconnect")
      disconnect
      retry_count=0
      connect
      ;;
    "toggle")
      toggle
      ;;
    "status")
      status
      ;;
    "")
      echo "Error: An operation is missing." >&2
      exit 1
      ;;
    *)
      echo "Error: Unknown operation was detected." >&2
      exit 1
      ;;
  esac
}

connect() {
  while [ "$(connected)" = "false" ] && [ "$retry_count" -lt "$retry_threshold" ]; do
    echo "Attempting to connect... (retry: $retry_count)"

    sudo systemctl start nordvpn nordvpnd
    set +e # not to fail caused by "You are not logged in."
    nordvpn connect "$target_country"
    set -e

    retry_count=$((retry_count + 1))
    sleep "$sleep_interval"
  done

  if [ "$(connected)" = "true" ]; then
    if [ "$SKIP_DNS" != 1 ]; then
      set +e
      unlock nordvpn-upstream "$no_restart"
      set -e
    fi
  else
    echo "Error: Failed to connect for some reason." >&2
  fi

  [ "$STATUS" = 1 ] && status
}

connected() {
  if [ "$(systemctl is-active nordvpn)" = "active" ] && [ "$(systemctl is-active nordvpnd)" = "active" ] && [ "$(get_country)" != "$my_country" ]; then
    echo true
  else
    echo false
  fi
}

disconnect() {
  while [ "$(disconnected)" = "false" ] && [ "$retry_count" -lt "$retry_threshold" ]; do
    echo "Attempting to disconnect... (retry: $retry_count)"

    sudo systemctl stop nordvpn nordvpnd

    retry_count=$((retry_count + 1))
    sleep "$sleep_interval"
  done

  if [ "$(disconnected)" = "true" ]; then
    if [ "$SKIP_DNS" != 1 ]; then
      set +e
      unlock adguard-upstream "$no_restart"
      set -e
    fi
  else
    echo "Error: Failed to disconnect for some reason." >&2
  fi

  [ "$STATUS" = 1 ] && status
}

disconnected() {
  if [ "$(systemctl is-active nordvpn | grep -e "inactive" -ce "failed")" -eq 1 ] && [ "$(systemctl is-active nordvpnd | grep -e "inactive" -ce "failed")" -eq 1 ]; then
    echo true
  else
    echo false
  fi
}

toggle() {
  if [ "$(connected)" = "true" ]; then
    disconnect
  elif [ "$(disconnected)" = "true" ]; then
    connect
  else
    echo "Error: Failed to fetch the status." >&2
  fi
}

status() {
  # e.g. nordvpn.service: active
  if [ "$(systemctl is-active nordvpn)" = "active" ]; then
    echo "nordvpn.service:  \e[1;32m$(systemctl is-active nordvpn)\e[0m"
  else
    echo "nordvpn.service:  \e[1;31m$(systemctl is-active nordvpn)\e[0m"
  fi

  # e.g. nordvpnd.service: active
  if [ "$(systemctl is-active nordvpnd)" = "active" ]; then
    echo "nordvpnd.service: \e[1;32m$(systemctl is-active nordvpnd)\e[0m"
  else
    echo "nordvpnd.service: \e[1;31m$(systemctl is-active nordvpnd)\e[0m"
  fi

  # e.g. upstream: nordvpn_upstream.conf
  upstreams=$(ls /etc/dnsmasq.priv/toggle | grep upstream)
  if [ "$(echo $upstreams | wc -l)" -eq 0 ]; then
    echo "upstream:         \e[1;31mno DNS set\e[0m"
  elif [ "$(echo $upstreams | wc -l)" -ge 2 ]; then
    echo "upstream:         \e[1;31m$upstreams\e[0m"
  elif [ "$upstreams" != "nordvpn_upstream.conf" ]; then
    echo "upstream:         \e[1;31m$upstreams\e[0m"
  else
    echo "upstream:         \e[1;32m$upstreams\e[0m"
  fi

  # e.g. country: CA
  current_country=$(get_country)
  if [ "$current_country" != "$my_country" ]; then
    echo "country:          \e[1;32m$current_country\e[0m"
  else
    echo "country:          \e[1;31m$current_country\e[0m"
  fi

  if [ "$VERBOSE" = 1 ]; then
    echo
    systemctl status nordvpn --no-pager || true
    echo
    systemctl status nordvpnd --no-pager || true
  fi
}

get_country() {
  # Return like "US"
  current_country=$(curl -s https://ipinfo.io | grep country | awk '{ print $2 }' | tr -d ',' | tr -d '"')

  if [ "$(echo "$current_country" | grep -c '[A-Z][A-Z]')" -ne 0 ]; then
    echo "$current_country"
  else
    echo "Warning: Failed to retrieve a country." >&2
    echo "$my_country"
  fi
}

set_var() {
  operation="$1"
  retry_count=0

  if [ "$MY_COUNTRY" != "" ]; then
    my_country="$MY_COUNTRY"
  else
    my_country="$DEFAULT_MY_COUNTRY"
  fi

  if [ "$TARGET_COUNTRY" != "" ]; then
    target_country="$TARGET_COUNTRY"
  else
    target_country="$DEFAULT_TARGET_COUNTRY"
  fi

  if [ "$RETRY" != "" ]; then
    retry_threshold="$RETRY"
  else
    retry_threshold="$DEFAULT_RETRY_THRESHOLD"
  fi

  if [ "$SLEEP" != "" ]; then
    sleep_interval="$SLEEP"
  else
    sleep_interval="$DEFAULT_SLEEP_INTERVAL"
  fi

  if [ "$NO_RESTART" != "" ]; then
    no_restart="--norestart"
  else
    no_restart=""
  fi
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: vpnctl [options]... [arguments]..." ''
  msg -- 'Arguments:'
  msg -- '  connect                     connect to the VPN server'
  msg -- '  connected                   check whether the VPN server is connected'
  msg -- '  disconnect                  disconnect from the VPN server'
  msg -- '  disconnected                check whether the VPN server is disconnected'
  msg -- '  reconnect                   disconnect from the VPN server, and connect to the same one again'
  msg -- '  toggle                      connect to the VPN server if it is not connected, otherwise, disconnect from it'
  msg -- '  status                      show status'
  msg -- ''
  msg -- 'Options:'
  flag    NO_RESTART        --norestart -- "skip to restart the daemon"
  param   MY_COUNTRY        --my      -- "specify your country code, which is used whether the connection succeeded or failed (default: JP)"
  param   TARGET_COUNTRY    --target  -- "specify a target country code (default: CA)"
  param   RETRY          -r --retry   -- "specify how many times this command attempts to connect to or disconnect from the VPN server (default: 5)"
  flag    SKIP_DNS          --skipdns -- "do not change the DNS servers"
  param   SLEEP          -s --sleep   -- "specify how much time this command sleeps between retries (default: 3)"
  flag    STATUS            --status  -- "show status even when the argument is not 'status'"
  flag    VERBOSE           --verbose -- "output the status verbosely"
  disp    :usage         -h --help    -- "show this help message and exit"
  disp    VERSION           --version -- "show the current version"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
NO_RESTART=''
MY_COUNTRY=''
TARGET_COUNTRY=''
RETRY=''
SKIP_DNS=''
SLEEP=''
STATUS=''
VERBOSE=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[rs]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
        ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--norestart')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        NO_RESTART="$OPTARG"
        ;;
      '--my')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        MY_COUNTRY="$OPTARG"
        shift ;;
      '--target')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        TARGET_COUNTRY="$OPTARG"
        shift ;;
      '-r'|'--retry')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        RETRY="$OPTARG"
        shift ;;
      '--skipdns')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        SKIP_DNS="$OPTARG"
        ;;
      '-s'|'--sleep')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        SLEEP="$OPTARG"
        shift ;;
      '--status')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        STATUS="$OPTARG"
        ;;
      '--verbose')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        VERBOSE="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: vpnctl [options]... [arguments]...

Arguments:
  connect                     connect to the VPN server
  connected                   check whether the VPN server is connected
  disconnect                  disconnect from the VPN server
  disconnected                check whether the VPN server is disconnected
  reconnect                   disconnect from the VPN server, and connect to the same one again
  toggle                      connect to the VPN server if it is not connected, otherwise, disconnect from it
  status                      show status

Options:
      --norestart             skip to restart the daemon
      --my MY_COUNTRY         specify your country code, which is used whether the connection succeeded or failed (default: JP)
      --target TARGET_COUNTRY specify a target country code (default: CA)
  -r, --retry RETRY           specify how many times this command attempts to connect to or disconnect from the VPN server (default: 5)
      --skipdns               do not change the DNS servers
  -s, --sleep SLEEP           specify how much time this command sleeps between retries (default: 3)
      --status                show status even when the argument is not 'status'
      --verbose               output the status verbosely
  -h, --help                  show this help message and exit
      --version               show the current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
