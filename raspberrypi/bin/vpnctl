#!/bin/sh
# shellcheck disable=SC2004

set -eu

DEFAULT_COUNTRY="JP"
DEFAULT_RETRY_THRESHOLD="5"
DEFAULT_SLEEP_INTERVAL="3"

main() {
  parse "$@"
  eval "set -- $REST"
  set_var "$@"

  case "$operation" in
    "connect")
      if [ "$country" = "" ]; then
        echo "Error: A country is missing." >&2
        exit 1
      fi

      while [ "$(connected)" = "false" ] && [ "$retry_count" -lt "$retry_threshold" ]; do
        echo "Attempting to connect... (retry: $retry_count)"

        sudo systemctl start nordvpn nordvpnd
        nordvpn connect "$country"

        retry_count=$((retry_count + 1))
        sleep "$sleep_interval"
      done

      if [ "$(connected)" = "false" ]; then
        echo "Error: Failed to connect for some reason." >&2
      fi

      ;;
    "disconnect")
      while [ "$(disconnected)" = "false" ] && [ "$retry_count" -lt "$retry_threshold" ]; do
        echo "Attempting to disconnect... (retry: $retry_count)"

        sudo systemctl stop nordvpn nordvpnd

        retry_count=$((retry_count + 1))
        sleep "$sleep_interval"
      done

      if [ "$(disconnected)" = "false" ]; then
        echo "Error: Failed to disconnect for some reason." >&2
      fi

      ;;
    "status")
      if [ "$(systemctl is-active nordvpn)" = "active" ]; then
        echo "nordvpn.service:  \e[1;32m$(systemctl is-active nordvpn)\e[0m"
      else
        echo "nordvpn.service:  \e[1;31m$(systemctl is-active nordvpn)\e[0m"
      fi

      if [ "$(systemctl is-active nordvpnd)" = "active" ]; then
        echo "nordvpnd.service: \e[1;32m$(systemctl is-active nordvpnd)\e[0m"
      else
        echo "nordvpnd.service: \e[1;31m$(systemctl is-active nordvpnd)\e[0m"
      fi

      current_country=$(get_country)
      if [ "$current_country" != "$my_country" ]; then
        echo "country:          \e[1;32m$current_country\e[0m"
      else
        echo "country:          \e[1;31m$current_country\e[0m"
      fi

      if [ "$VERBOSE" = 1 ]; then
        echo
        systemctl status nordvpn || true
        echo
        systemctl status nordvpnd || true
      fi

      ;;
    "")
      echo "Error: An operation is missing." >&2
      exit 1
      ;;
    *)
      echo "Error: Unknown operation was detected." >&2
      exit 1
      ;;
  esac
}

connected() {
  if [ "$(systemctl is-active nordvpn)" = "active" ] && [ "$(systemctl is-active nordvpnd)" = "active" ] && [ "$(get_country)" != "$my_country" ]; then
    echo true
  else
    echo false
  fi
}

disconnected() {
  if [ "$(systemctl is-active nordvpn | grep -e "inactive" -ce "failed")" -eq 1 ] && [ "$(systemctl is-active nordvpnd | grep -e "inactive" -ce "failed")" -eq 1 ]; then
    echo true
  else
    echo false
  fi
}

get_country() {
  # Return like US
  current_country=$(curl -s https://ipinfo.io | grep country | awk '{ print $2 }' | tr -d ',' | tr -d '"')

  if [ "$(echo "$current_country" | grep -c '[A-Z][A-Z]')" -ne 0 ]; then
    echo "$current_country"
  else
    echo "Warning: Failed to retrieve a country." >&2
    echo "$my_country"
  fi
}

set_var() {
  operation="$1"
  [ "$operation" = "connect" ] && country="$2"
  retry_count=0

  if [ "$COUNTRY" != "" ]; then
    my_country="$COUNTRY"
  else
    my_country="$DEFAULT_COUNTRY"
  fi

  if [ "$RETRY" != "" ]; then
    retry_threshold="$RETRY"
  else
    retry_threshold="$DEFAULT_RETRY_THRESHOLD"
  fi

  if [ "$SLEEP" != "" ]; then
    sleep_interval="$SLEEP"
  else
    sleep_interval="$DEFAULT_SLEEP_INTERVAL"
  fi
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: vpnctl [options]... [arguments]..." ''
  msg -- 'Arguments:'
  msg -- '  connect <COUNTRY_CODE>      connect to the VPN server'
  msg -- '  disconnect                  disconnect from the VPN server'
  msg -- '  status                      show status'
  msg -- ''
  msg -- 'Options:'
  param   COUNTRY -c --country -- "specify your country code, which is used whether the connection succeeded or failed (default: JP)"
  param   RETRY   -r --retry   -- "specify how many times this command attempts to connect to or disconnect from the VPN server (default: 5)"
  param   SLEEP   -s --sleep   -- "specify how much time this command sleeps between retries (default: 3)"
  flag    VERBOSE    --verbose -- "output the status verbosely"
  disp    :usage  -h --help    -- "show this help message and exit"
  disp    VERSION    --version -- "show the current version"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
COUNTRY=''
RETRY=''
SLEEP=''
VERBOSE=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[crs]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
        ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '-c'|'--country')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        COUNTRY="$OPTARG"
        shift ;;
      '-r'|'--retry')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        RETRY="$OPTARG"
        shift ;;
      '-s'|'--sleep')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        SLEEP="$OPTARG"
        shift ;;
      '--verbose')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        VERBOSE="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: vpnctl [options]... [arguments]...

Arguments:
  connect <COUNTRY_CODE>      connect to the VPN server
  disconnect                  disconnect from the VPN server
  status                      show status

Options:
  -c, --country COUNTRY       specify your country code, which is used whether the connection succeeded or failed (default: JP)
  -r, --retry RETRY           specify how many times this command attempts to connect to or disconnect from the VPN server (default: 5)
  -s, --sleep SLEEP           specify how much time this command sleeps between retries (default: 3)
      --verbose               output the status verbosely
  -h, --help                  show this help message and exit
      --version               show the current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
