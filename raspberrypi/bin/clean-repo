#!/bin/sh

main() {
  for TARGET; do
    # untracked new files
    if [ "$(git -C "$TARGET" status --porcelain | grep "^??")" != "" ]; then
      git -C "$TARGET" clean -df
    fi

    # tracked new files
    if [ "$(git -C "$TARGET" status --porcelain | grep "^A")" != "" ]; then
      git -C "$TARGET" restore --staged .
      git -C "$TARGET" clean -df
    fi

    # tracked modified or deleted files
    if [ "$(git -C "$TARGET" status --porcelain | grep -e "^M" -e "^D")" != "" ]; then
      git -C "$TARGET" restore --staged .
      git -C "$TARGET" restore .
    fi

    # untracked modified or deleted files
    if [ "$(git -C "$TARGET" status --porcelain | grep -e "^ M" -e "^ D")" != "" ]; then
      git -C "$TARGET" restore .
    fi

    # already committed files
    if [ "$(git rev-list HEAD@{upstream}..HEAD)" != "" ]; then
      #
      # For instance, "git reset --soft HEAD~2" reverts two commits back.
      #   https://stackoverflow.com/questions/7932222/how-to-revert-two-commits-back-and-commit-only-good-stuff#answer-7932255
      #   https://stackoverflow.com/questions/1463340/how-can-i-revert-multiple-git-commits#answer-43081965
      # "git rev-list HEAD@{upstream}..HEAD | wc -l | awk '{ print $1 }'" indicates how many commits have not been pushed.
      #   https://stackoverflow.com/questions/19206816/what-to-add-to-git-status-porcelain-to-make-it-behave-like-git-status#answer-19206916
      #
      git -C "$TARGET" reset --soft HEAD~$(git rev-list HEAD@{upstream}..HEAD | wc -l | awk '{ print $1 }')
      git -C "$TARGET" restore --staged .
      git -C "$TARGET" restore .
    fi
  done
}

main "$@"
