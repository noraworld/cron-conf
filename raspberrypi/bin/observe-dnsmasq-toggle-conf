#!/bin/sh
# shellcheck disable=SC2004

set -u
export PATH=/home/ubuntu/workspace/cron-conf/bin:/home/ubuntu/workspace/cron-conf/raspberrypi/bin:/home/ubuntu/.local/share/zinit/polaris/bin:"$PATH"
RETRY_INTERVAL=1
ACCOMPLISHED_CHECK_INTERVAL="300"
PUNISHMENT_DURATION="1 hour"



observe() {
  observed_file=$(basename "$observed_path")
  [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): observed path is $observed_path"

  if [ "$FILE" = "" ]; then
    file=$observed_file
  else
    file=$FILE
  fi

  if [ "$file" = "$observed_file" ]; then
    switch_mode "$@"
  fi
}



switch_mode() {
  if [ "$VPN" = 1 ] && [ "$(force-vpn check)" -gt 0 ]; then
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): operation skipped because of VPN safe"
    return
  fi

  case "$MODE" in
    "git")
      git_mode "$@"
      ;;
    "ln")
      ln_mode "$@"
      ;;
    "unlink")
      unlink_mode "$@"
      ;;
    "cron")
      cron_mode "$@"
      ;;
    "sync")
      sync_mode "$@"
      ;;
    "firewall")
      firewall_mode "$@"
      ;;
    "todo")
      todo_mode "$@"
      ;;
    *)
      echo "error: mode $MODE is not supported" >&2
      exit 1
      ;;
  esac
}



git_mode() {
  # shellcheck disable=SC1083
  while [ "$(git -C "$TARGET" status --porcelain)" != "" ] || [ "$(git -C "$TARGET" rev-list HEAD@{upstream}..HEAD)" != "" ]; do
    clean-repo perform "$TARGET" --immediately
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): restored $TARGET"
    sleep "$RETRY_INTERVAL"
  done
}



ln_mode() {
  while ! [ -e "$TARGET/$file" ] || { [ -e "$TARGET/$file" ] && ! [ -L "$TARGET/$file" ]; } || { [ -L "$TARGET/$file" ] && [ "$(readlink "$TARGET/$file")" != "$SOURCE/$file" ]; }; do
    create-dnsmasq-toggle-conf "$TARGET/$file" --immediately
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): created symlink $TARGET/$file"
    sleep "$RETRY_INTERVAL"
  done
}



unlink_mode() {
  while [ -e "$TARGET/$file" ]; do
    remove-dnsmasq-toggle-conf "$TARGET/$file" --immediately
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): deleted symlink $TARGET/$file"
    sleep "$RETRY_INTERVAL"
  done
}



cron_mode() {
  cron-apply perform
  [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): restored cron configuration"
}



sync_mode() {
  while [ "$(diff -qr "$SOURCE" "$TARGET" | grep "^Only in $TARGET")" != "" ]; do
    clean-toggle-dir "$SOURCE" "$TARGET" --immediately
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): deleted illegal files in directory"
  done
}



firewall_mode() {
  # "observe-firewall check" may not be necessary because the same check is done before "observe-firewall deny."
  # Besides, it takes a little time to execute them since the same check is done twice.
  while [ "$(observe-firewall check)" -le 0 ]; do
    observe-firewall deny --debug
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset $TARGET"
  done
}



todo_mode() {
  #           service_name_for_variable   service_name_for_observer   service_name_for_quotarget
  check_todo  "gaming"                    "gaming"                    "gaming"
  check_todo  "netflix"                   "netflix"                   "netflix"
  check_todo  "social_media"              "social-media"              "social-media"
  check_todo  "vod"                       "vod"                       "vod"
  check_todo  "youtube"                   "youtube"                   "youtube"
  check_todo  "youtube_alternative"       "youtube-alternative"       "youtube-alternative"
  check_todo  "youtube_music_persistent"  "youtube-music-persistent"  "youtube-music-persistent"
  check_todo  "deregulated_superman"      "deregulated-superman"      "deregulated-superman"
  check_todo  "maeve"                     "maeve"                     "maeve"
  check_todo  "ometeotl"                  "ometeotl"                  "ometeotl"
  check_todo  "superman"                  "superman"                  "superman"
  check_todo  "upstream"                  "adguard-upstream"          "upstream"
  discipline_todo

  # ln_mode & unlink_mode (gaming)
  # shellcheck disable=SC2154
  if [ "$gaming_skipped" = "false" ] && [ "$(restrict-all check "observe-gaming-conf")" -le 0 ]; then
    restrict-all reset "observe-gaming-conf"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-gaming-conf"
  fi

  # ln_mode & unlink_mode (netflix)
  # shellcheck disable=SC2154
  if [ "$netflix_skipped" = "false" ] && [ "$(restrict-all check "observe-netflix-conf")" -le 0 ]; then
    restrict-all reset "observe-netflix-conf"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-netflix-conf"
  fi

  # ln_mode & unlink_mode (social-media)
  # shellcheck disable=SC2154
  if [ "$social_media_skipped" = "false" ] && [ "$(restrict-all check "observe-social-media-conf")" -le 0 ]; then
    restrict-all reset "observe-social-media-conf"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-social-media-conf"
  fi

  # ln_mode & unlink_mode (vod)
  # shellcheck disable=SC2154
  if [ "$vod_skipped" = "false" ] && [ "$(restrict-all check "observe-vod-conf")" -le 0 ]; then
    restrict-all reset "observe-vod-conf"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-vod-conf"
  fi

  # ln_mode & unlink_mode (youtube)
  # shellcheck disable=SC2154
  if [ "$youtube_skipped" = "false" ] && [ "$(restrict-all check "observe-youtube-conf")" -le 0 ]; then
    restrict-all reset "observe-youtube-conf"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-youtube-conf"
  fi

  # ln_mode & unlink_mode (youtube-alternative)
  # shellcheck disable=SC2154
  if [ "$youtube_alternative_skipped" = "false" ] && [ "$(restrict-all check "observe-youtube-alternative-conf")" -le 0 ]; then
    restrict-all reset "observe-youtube-alternative-conf"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-youtube-alternative-conf"
  fi

  # ln_mode & unlink_mode (youtube-music-persistent)
  # shellcheck disable=SC2154
  if [ "$youtube_music_persistent_skipped" = "false" ] && [ "$(restrict-all check "observe-youtube-music-persistent-conf")" -le 0 ]; then
    restrict-all reset "observe-youtube-music-persistent-conf"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-youtube-music-persistent-conf"
  fi

  # ln_mode & unlink_mode (deregulated-superman)
  # shellcheck disable=SC2154
  if [ "$deregulated_superman_skipped" = "false" ] && [ "$(restrict-all check "observe-deregulated-superman-conf")" -le 0 ]; then
    restrict-all reset "observe-deregulated-superman-conf"
    restrict-all reset "observe-deregulated-superman-allow-conf"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-deregulated-superman-conf"
  fi

  # ln_mode & unlink_mode (maeve)
  # shellcheck disable=SC2154
  if [ "$maeve_skipped" = "false" ] && [ "$(restrict-all check "observe-maeve-conf")" -le 0 ]; then
    restrict-all reset "observe-maeve-conf"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-maeve-conf"
  fi

  # ln_mode & unlink_mode (ometeotl)
  # shellcheck disable=SC2154
  if [ "$ometeotl_skipped" = "false" ] && [ "$(restrict-all check "observe-ometeotl-conf")" -le 0 ]; then
    restrict-all reset "observe-ometeotl-conf"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-ometeotl-conf"
  fi

  # ln_mode & unlink_mode (superman)
  # shellcheck disable=SC2154
  if [ "$superman_skipped" = "false" ] && [ "$(restrict-all check "observe-superman-conf")" -le 0 ]; then
    restrict-all reset "observe-superman-conf"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-superman-conf"
  fi

  # ln_mode & unlink_mode (upstream)
  # shellcheck disable=SC2154
  if [ "$upstream_skipped" = "false" ] && [ "$(restrict-all check "observe-adguard-upstream-conf")" -le 0 ]; then
    restrict-all reset                 \
      observe-adguard-upstream-conf    \
      observe-cloudflare-upstream-conf \
      observe-nordvpn-upstream-conf    \
      observe-superman-upstream-conf
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-***-upstream-conf"
  fi

  # ln_mode & unlink_mode (discipline)
  if [ "$discipline_skipped" = "false" ] && [ "$(restrict-all check "observe-discipline-conf")" -le 0 ]; then
    restrict-all reset "observe-discipline-conf"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset observe-discipline-conf"
  fi

  # vpn check
  if [ "$discipline_skipped" = "false" ] && [ "$(force-vpn check)" -le 0 ]; then
    force-vpn reset
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset $TARGET"
  fi

  # git_mode
  if [ "$discipline_skipped" = "false" ] &&
        [ "$(clean-repo check \
               "/home/ubuntu/workspace/cron-conf" \
               "/home/ubuntu/workspace/dnsmasq-conf/dnsmasq" \
               "/home/ubuntu/workspace/envsman/raspberrypi/dnsmasq/dnsmasq.priv")" -le 0 ]; then

    # MEMO: "--immediately" might not be necessary
    # clean-repo --immediately perform                                    \
    #   "/home/ubuntu/workspace/cron-conf"                                \
    #   "/home/ubuntu/workspace/dnsmasq-conf/dnsmasq"                     \
    #   "/home/ubuntu/workspace/envsman/raspberrypi/dnsmasq/dnsmasq.priv"
    clean-repo perform                                                  \
      "/home/ubuntu/workspace/cron-conf"                                \
      "/home/ubuntu/workspace/dnsmasq-conf/dnsmasq"                     \
      "/home/ubuntu/workspace/envsman/raspberrypi/dnsmasq/dnsmasq.priv"

    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset $TARGET"
  fi

  # firewall_mode
  if [ "$discipline_skipped" = "false" ] && [ "$(observe-firewall check)" -le 0 ]; then
    # MEMO: I wonder if there is a better way not to get punished the first time the diary is updated but to do it a second time.
    # observe-firewall deny --debug
    observe-firewall deny --safe
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset $TARGET"
  fi

  # cron_mode
  if [ "$discipline_skipped" = "false" ] && [ "$(cron-apply check)" -le 0 ]; then
    cron-apply perform --skip
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): restored cron configuration"
  fi

  # sync_mode
  if [ "$discipline_skipped" = "false" ] && [ "$(diff -qr "$SOURCE" "$TARGET" | grep "^Only in $TARGET")" != "" ]; then
    # MEMO: "--immediately" might not be necessary
    # clean-toggle-dir "$SOURCE" "$TARGET" --immediately
    clean-toggle-dir "$SOURCE" "$TARGET"
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): deleted illegal files in directory"
  fi

  # observer check
  if [ "$discipline_skipped" = "false" ] && {
     [ "$(systemctl --user is-active observe-crontab)"             != "active" ] ||
     [ "$(systemctl --user is-active observe-cron-conf)"           != "active" ] ||
     [ "$(systemctl --user is-active observe-dnsmasq-conf)"        != "active" ] ||
     [ "$(systemctl --user is-active observe-dnsmasq-priv-conf)"   != "active" ] ||
     [ "$(systemctl --user is-active observe-dnsmasq-toggle)"      != "active" ] ||
     [ "$(systemctl --user is-active observe-dnsmasq-priv-toggle)" != "active" ]; }
  then
    systemctl --user start observe-crontab
    systemctl --user start observe-cron-conf
    systemctl --user start observe-dnsmasq-conf
    systemctl --user start observe-dnsmasq-priv-conf
    systemctl --user start observe-dnsmasq-toggle
    systemctl --user start observe-dnsmasq-priv-toggle
  fi

  sleep "$RETRY_INTERVAL"
}



check_todo() {
  service_name_for_variable="$1"
  service_name_for_observer="$2"
  service_name_for_quotarget="$3"

  set +u
  eval "todo_skipped=\${${service_name_for_variable}_skipped}"
  eval "todo_quota_refresh=\${${service_name_for_variable}_quota_refresh}"

  if [ "$todo_skipped" = "" ]; then
    eval "${service_name_for_variable}_skipped=false"
    todo_skipped=false
  fi

  if [ "$todo_quota_refresh" = "" ]; then
    eval "${service_name_for_variable}_quota_refresh=false"
    todo_quota_refresh=false
  fi
  set -u

  if [ "$todo_skipped" = "false" ]; then
    if \
      [ "$(restrict-all check "observe-${service_name_for_observer}-conf")" -le 0 ] &&
      [ "$(quotarget --timeframe "$TIMEFRAME" --service "${service_name_for_quotarget}")" -gt 0 ] &&
      [ "$(sincere)" -gt 0 ];
    then
      eval "${service_name_for_variable}_skipped=true"
    fi
  else
    set +u
    eval "todo_accomplished_last_checked_at=\${${service_name_for_variable}_accomplished_last_checked_at}"

    if [ "$todo_accomplished_last_checked_at" = "" ]; then
      eval "${service_name_for_variable}_accomplished_last_checked_at=$(date +%s)"
      todo_accomplished_last_checked_at=$(date +%s)
    fi
    set -u

    if [ "$(echo $(( $(date +%s) - $todo_accomplished_last_checked_at )))" -gt "$ACCOMPLISHED_CHECK_INTERVAL" ]; then
      eval "${service_name_for_variable}_accomplished_last_checked_at=$(date +%s)"

      if [ "$(quotarget --timeframe "$TIMEFRAME" --service "${service_name_for_quotarget}")" -lt 0 ] || [ "$(sincere)" -lt 0 ]; then
        eval "${service_name_for_variable}_skipped=false"

        if [ "$todo_quota_refresh" = "true" ]; then
          /home/ubuntu/workspace/cron-conf/bin/lib/punish                \
            --from "$(echo "$(basename "$0")" "$*" | sed -r 's/\s$//g')" \
            --duration "$PUNISHMENT_DURATION"
        else
          eval "${service_name_for_variable}_quota_refresh=true"
        fi
      fi
    fi
  fi
}



discipline_todo() {
  set +u
  [ "$discipline_skipped" = "" ] && discipline_skipped=false
  [ "$discipline_quota_refresh" = "" ] && discipline_quota_refresh=false
  set -u

  if [ "$discipline_skipped" = "false" ]; then
    if \
      [ "$(restrict-all check "observe-discipline-conf")" -le 0 ] &&
      [ "$(quotarget --timeframe "$TIMEFRAME" --service discipline)" -gt 0 ] &&
      [ "$(sincere)" -gt 0 ];
    then
      discipline_skipped=true

      if [ "$(systemctl --user is-active observe-firewall)" != "active" ] && [ "$(observe-firewall check)" -gt 0 ]; then
        observe-firewall allow
      fi

      if [ "$(systemctl --user is-active observe-crontab)"             = "active" ] ||
          [ "$(systemctl --user is-active observe-cron-conf)"           = "active" ] ||
          [ "$(systemctl --user is-active observe-dnsmasq-conf)"        = "active" ] ||
          [ "$(systemctl --user is-active observe-dnsmasq-priv-conf)"   = "active" ] ||
          [ "$(systemctl --user is-active observe-dnsmasq-toggle)"      = "active" ] ||
          [ "$(systemctl --user is-active observe-dnsmasq-priv-toggle)" = "active" ]
      then
        systemctl --user stop observe-crontab
        systemctl --user stop observe-cron-conf
        systemctl --user stop observe-dnsmasq-conf
        systemctl --user stop observe-dnsmasq-priv-conf
        systemctl --user stop observe-dnsmasq-toggle
        systemctl --user stop observe-dnsmasq-priv-toggle
      fi
    fi
  else
    if [ "$(systemctl --user is-active observe-firewall)" != "active" ] && [ "$(observe-firewall check)" -gt 0 ]; then
      observe-firewall allow
    fi

    if [ "$(systemctl --user is-active observe-crontab)"             = "active" ] ||
       [ "$(systemctl --user is-active observe-cron-conf)"           = "active" ] ||
       [ "$(systemctl --user is-active observe-dnsmasq-conf)"        = "active" ] ||
       [ "$(systemctl --user is-active observe-dnsmasq-priv-conf)"   = "active" ] ||
       [ "$(systemctl --user is-active observe-dnsmasq-toggle)"      = "active" ] ||
       [ "$(systemctl --user is-active observe-dnsmasq-priv-toggle)" = "active" ]
    then
      systemctl --user stop observe-crontab
      systemctl --user stop observe-cron-conf
      systemctl --user stop observe-dnsmasq-conf
      systemctl --user stop observe-dnsmasq-priv-conf
      systemctl --user stop observe-dnsmasq-toggle
      systemctl --user stop observe-dnsmasq-priv-toggle
    fi

    set +u
    [ "$discipline_accomplished_last_checked_at" = "" ] && discipline_accomplished_last_checked_at=$(date +%s)
    set -u

    if [ "$(echo $(( $(date +%s) - $discipline_accomplished_last_checked_at )))" -gt "$ACCOMPLISHED_CHECK_INTERVAL" ]; then
      discipline_accomplished_last_checked_at=$(date +%s)

      if [ "$(quotarget --timeframe "$TIMEFRAME" --service discipline)" -lt 0 ] || [ "$(sincere)" -lt 0 ]; then
        discipline_skipped=false

        if [ "$discipline_quota_refresh" = "true" ]; then
          /home/ubuntu/workspace/cron-conf/bin/lib/punish                \
            --from "$(echo "$(basename "$0")" "$*" | sed -r 's/\s$//g')" \
            --duration "$PUNISHMENT_DURATION"
        else
          discipline_quota_refresh=true
        fi
      fi
    fi
  fi
}



initialize() {
  if [ "$MODE" = "firewall" ] || [ "$MODE" = "todo" ]; then
    if [ "$(observe-firewall check)" -le 0 ]; then
      observe-firewall deny --safe
      [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset $TARGET"
    fi
  fi
}



main() {
  parse "$@"
  eval "set -- $REST"
  validate "$@"
  initialize "$@"

  # shellcheck disable=SC2086
  if [ "$SUDO" = "1" ]; then
    sudo inotifywait -e "$EVENT" --format '%w%f' -m -q -r -t 0 --exclude "\.git" "$TARGET" | while read -r observed_path; do
      observe "$@"
    done
  else
    while true; do
      sudo mkdir -p "$TARGET"
      file=$FILE
      switch_mode "$@"

      inotifywait -e "$EVENT" --format '%w%f' -m -q -r -t 5 --exclude "\.git" "$TARGET" | while read -r observed_path; do
        observe "$@"
      done
    done
  fi
}



validate() {
  if [ "$EVENT" = "" ]; then
    echo "error: --event not set" >&2
    exit 1
  fi

  if [ "$SOURCE" = "" ]; then
    if [ "$EVENT" = "delete" ] && [ "$MODE" != "cron" ]; then
      echo "error: --source not set" >&2
      exit 1
    fi
  fi

  if [ "$TARGET" = "" ]; then
    echo "error: --target not set" >&2
    exit 1
  fi

  if [ "$MODE" = "" ]; then
    echo "error: --mode not set" >&2
    exit 1
  elif [ "$MODE" != "git" ] && [ "$MODE" != "ln" ] && [ "$MODE" != "unlink" ] && [ "$MODE" != "cron" ] && [ "$MODE" != "sync" ] && [ "$MODE" != "firewall" ] && [ "$MODE" != "todo" ]; then
    echo "error: unrecognized mode $MODE" >&2
    exit 1
  fi

  if [ "$TIMEFRAME" = "" ]; then
    TIMEFRAME="morning"
  fi
}



# @getoptions
parser_definition() {
  setup REST help:usage -- "Usage: observe-dnsmasq-toggle-conf [options]... [arguments]..." ""
  msg -- "Options:"
  flag   DEBUG     -d --debug     -- "debug mode"
  param  EVENT     -e --event     -- "TBD"
  param  FILE      -f --file      -- "observe only a specific file (all files in a directory by default)"
  param  SOURCE    -s --source    -- "TBD"
  param  TARGET    -t --target    -- "target directory to observe (current directory by default)"
  param  TIMEFRAME    --timeframe -- "timeframe"
  flag   SUDO         --sudo      -- "TBD"
  param  MODE      -m --mode      -- "git, ln, unlink, cron, or sync"
  flag   VPN          --vpn       -- "only if you are connected to a VPN and have a foreign IP address, you will be exempt from the restrictions"
  disp   :usage    -h --help      -- "print help message and exit"
  disp   VERSION      --version   -- "show the current version"
}
# @end



# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DEBUG=''
EVENT=''
FILE=''
SOURCE=''
TARGET=''
TIMEFRAME=''
SUDO=''
MODE=''
VPN=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[efstm]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
        ;;
      -[dh]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '-d'|'--debug')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DEBUG="$OPTARG"
        ;;
      '-e'|'--event')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        EVENT="$OPTARG"
        shift ;;
      '-f'|'--file')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        FILE="$OPTARG"
        shift ;;
      '-s'|'--source')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        SOURCE="$OPTARG"
        shift ;;
      '-t'|'--target')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        TARGET="$OPTARG"
        shift ;;
      '--timeframe')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        TIMEFRAME="$OPTARG"
        shift ;;
      '--sudo')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        SUDO="$OPTARG"
        ;;
      '-m'|'--mode')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        MODE="$OPTARG"
        shift ;;
      '--vpn')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        VPN="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: observe-dnsmasq-toggle-conf [options]... [arguments]...

Options:
  -d, --debug                 debug mode
  -e, --event EVENT           TBD
  -f, --file FILE             observe only a specific file (all files in a directory by default)
  -s, --source SOURCE         TBD
  -t, --target TARGET         target directory to observe (current directory by default)
      --timeframe TIMEFRAME   timeframe
      --sudo                  TBD
  -m, --mode MODE             git, ln, unlink, cron, or sync
      --vpn                   only if you are connected to a VPN and have a foreign IP address, you will be exempt from the restrictions
  -h, --help                  print help message and exit
      --version               show the current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end



main "$@"
