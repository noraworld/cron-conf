#!/bin/sh

set -u
export PATH=/home/ubuntu/workspace/cron-conf/bin:/home/ubuntu/.local/share/zinit/polaris/bin:"$PATH"

PROG_NAME=$(basename "$0")



observe() {
  observed_file=$(basename "$observed_path")

  if [ "$FILE" = "" ]; then
    file=$observed_file
  else
    file=$FILE
  fi

  if [ "$file" = "$observed_file" ]; then
    case "$EVENT" in
      "create")
        case "$MODE" in
          "link")
            sudo unlink "$TARGET/$file"
            # exrd is inappropriate here because the file is createable while it waits for the daemon to restart
            sudo systemctl restart dnsmasq
            echo "INFO: Deleted symlink \"$TARGET/$file\" automatically"
            ;;
          "file")
            echo "TODO!"
            exit 2
            ;;
          "cron")
            echo "ERROR: The combination of mode \"$MODE\" and event \"$EVENT\" is illegal." >&2
            exit 1
            ;;
        esac
        ;;
      "delete")
        case "$MODE" in
          "link")
            sudo ln -s "$SOURCE/$file" "$TARGET"
            # exrd is inappropriate here because the file is deleteable while it waits for the daemon to restart
            sudo systemctl restart dnsmasq
            echo "INFO: Created symlink \"$TARGET/$file\" automatically"
            ;;
          "file")
            echo "TODO!"
            exit 2
            ;;
          "cron")
            ca
            ;;
        esac
        ;;
      "modify")
        case "$MODE" in
          "link")
            echo "ERROR: The combination of mode \"$MODE\" and event \"$EVENT\" is illegal." >&2
            exit 1
            ;;
          # Only track modified files
          # "inotifywait -e modify" also tracks created files such as
          # "youtube.conf.swp", which causes "git" command to fail
          "file")
            if [ "$(git -C "$TARGET" status --porcelain | grep -e "^M" -e "^ M" | grep "$file")" != "" ]; then
              git -C "$TARGET" restore "$observed_path"
              echo "INFO: Restored changes of \"$file\" automatically"
            fi
            ;;
          "cron")
            ca
            ;;
        esac
        ;;
      "move")
        echo "TODO!"
        exit 2
        ;;
      *)
        case "$MODE" in
          "file")
            git -C "$TARGET" clean -df
            git -C "$TARGET" restore --staged "$observed_path"
            git -C "$TARGET" restore "$observed_path"
          ;;
          *)
            echo "Error: the combination of event $EVENT and mode $MODE is not supported" >&2
            exit 2
          ;;
        esac
        ;;
    esac
  fi
}



main() {
  parse_options "$@"
  validate "$@"

  # shellcheck disable=SC2086
  if [ "$SUDO" = "1" ]; then
    sudo inotifywait -e "$EVENT" --format '%w%f' -m -q -r -t 0 "$TARGET" | while read -r observed_path; do
      observe
    done
  else
    inotifywait -e "$EVENT" --format '%w%f' -m -q -r -t 0 "$TARGET" | while read -r observed_path; do
      observe
    done
  fi
}



parse_options() {
  # shellcheck disable=SC1090
  . "$(dirname "$(realpath "$0")")"/lib/"$PROG_NAME"/parser
  parse "$@"
  eval "set -- $REST"
}



validate() {
  if [ "$EVENT" = "" ]; then
    echo "ERROR: --event not set" >&2
    exit 1
  fi

  if [ "$SOURCE" = "" ]; then
    if [ "$EVENT" = "delete" ] && [ "$MODE" != "cron" ]; then
      echo "ERROR: --source not set" >&2
      exit 1
    fi
  fi

  if [ "$TARGET" = "" ]; then
    echo "ERROR: --target not set" >&2
    exit 1
  fi

  if [ "$MODE" = "" ]; then
    echo "ERROR: --mode not set" >&2
    exit 1
  elif [ "$MODE" != "link" ] && [ "$MODE" != "file" ] && [ "$MODE" != "cron" ]; then
    echo "ERROR: Unrecognized mode: $MODE" >&2
    exit 1
  fi
}



main "$@"
