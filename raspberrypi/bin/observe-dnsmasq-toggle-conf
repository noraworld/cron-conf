#!/bin/sh
# shellcheck disable=SC2004

set -u
export PATH=/home/ubuntu/workspace/cron-conf/bin:/home/ubuntu/workspace/cron-conf/raspberrypi/bin:/home/ubuntu/.local/share/zinit/polaris/bin:"$PATH"
RETRY_INTERVAL=1



observe() {
  observed_file=$(basename "$observed_path")
  [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): observed path is $observed_path"

  if [ "$FILE" = "" ]; then
    file=$observed_file
  else
    file=$FILE
  fi

  if [ "$file" = "$observed_file" ]; then
    switch_mode "$@"
  fi
}



switch_mode() {
  case "$MODE" in
    "git")
      git_mode "$@"
      ;;
    "ln")
      ln_mode "$@"
      ;;
    "unlink")
      unlink_mode "$@"
      ;;
    "cron")
      cron_mode "$@"
      ;;
    "sync")
      sync_mode "$@"
      ;;
    "todo")
      todo_mode "$@"
      ;;
    *)
      echo "error: mode $MODE is not supported" >&2
      exit 1
      ;;
  esac
}



git_mode() {
  # shellcheck disable=SC1083
  while [ "$(git -C "$TARGET" status --porcelain)" != "" ] || [ "$(git -C "$TARGET" rev-list HEAD@{upstream}..HEAD)" != "" ]; do
    clean-repo perform "$TARGET" --immediately
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): restored $TARGET"
    sleep "$RETRY_INTERVAL"
  done
}



ln_mode() {
  while ! [ -e "$TARGET/$file" ] || { [ -e "$TARGET/$file" ] && ! [ -L "$TARGET/$file" ]; } || { [ -L "$TARGET/$file" ] && [ "$(readlink "$TARGET/$file")" != "$SOURCE/$file" ]; }; do
    create-dnsmasq-toggle-conf "$TARGET/$file" --immediately
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): created symlink $TARGET/$file"
    sleep "$RETRY_INTERVAL"
  done
}



unlink_mode() {
  while [ -e "$TARGET/$file" ]; do
    remove-dnsmasq-toggle-conf "$TARGET/$file" --immediately
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): deleted symlink $TARGET/$file"
    sleep "$RETRY_INTERVAL"
  done
}



cron_mode() {
  cron-apply
  [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): restored cron configuration"
}



sync_mode() {
  while [ "$(diff -qr "$SOURCE" "$TARGET" | grep "^Only in $TARGET")" != "" ]; do
    clean-toggle-dir "$SOURCE" "$TARGET" --immediately
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): deleted illegal files in directory"
  done
}



todo_mode() {
  # TODO?: Fix the problem that once a checklist is improperly unlocked, it will not be censored thereafter.

  set +u
  [ "$todo_skipped" = "" ] && todo_skipped=false
  set -u

  if [ "$todo_skipped" = "false" ]; then
    if [ "$(restrict-all check)" -le 0 ] &&
       # Do not retry many times, because no matter how many times you do that, the result is likely to be the same.
       # Besides, it delays knowing whether the restrictions are unlocked if there are some attempts.
       [ "$(todo-accomplished --repo "noraworld/diary" --except --standard 5 --past 2 --retry 1)" -gt 0 ]; then
      todo_skipped=true
    else
      todo_skipped=false
    fi
  fi

  # ln_mode & unlink_mode
  while [ "$(restrict-all check)" -le 0 ] && [ "$todo_skipped" = "false" ]; do
    restrict-all reset
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset $TARGET"
    sleep "$RETRY_INTERVAL"
  done

  while [ "$todo_skipped" = "false" ] && [ "$(force-vpn check)" -le 0 ]; do
    force-vpn reset
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset $TARGET"
    sleep "$RETRY_INTERVAL"
  done

  # git_mode
  while [ "$todo_skipped" = "false" ] &&
        [ "$(clean-repo check \
               "/home/ubuntu/workspace/cron-conf" \
               "/home/ubuntu/workspace/dnsmasq-conf/dnsmasq" \
               "/home/ubuntu/workspace/envsman/raspberrypi/dnsmasq/dnsmasq.priv" \
               "/home/ubuntu/workspace/envsman/raspberrypi/etc/netplan")" -le 0 ]; do

    clean-repo --immediately perform                                    \
      "/home/ubuntu/workspace/cron-conf"                                \
      "/home/ubuntu/workspace/dnsmasq-conf/dnsmasq"                     \
      "/home/ubuntu/workspace/envsman/raspberrypi/dnsmasq/dnsmasq.priv" \
      "/home/ubuntu/workspace/envsman/raspberrypi/etc/netplan"

    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset $TARGET"
    sleep "$RETRY_INTERVAL"
  done

  # "observe-firewall check" may not be necessary because the same check is done before "observe-firewall deny."
  # Besides, it takes a little time to execute them since the same check is done twice.
  while [ "$todo_skipped" = "false" ] && [ "$(observe-firewall check)" -le 0 ]; do
    observe-firewall deny --debug
    [ "$DEBUG" = 1 ] && echo "debug: $(date '+%s'): reset $TARGET"
    sleep "$RETRY_INTERVAL"
  done
}



main() {
  parse "$@"
  eval "set -- $REST"
  validate "$@"

  # shellcheck disable=SC2086
  if [ "$SUDO" = "1" ]; then
    sudo inotifywait -e "$EVENT" --format '%w%f' -m -q -r -t 0 --exclude "\.git" "$TARGET" | while read -r observed_path; do
      observe "$@"
    done
  else
    while true; do
      sudo mkdir -p "$TARGET"
      file=$FILE
      switch_mode "$@"

      inotifywait -e "$EVENT" --format '%w%f' -m -q -r -t 5 --exclude "\.git" "$TARGET" | while read -r observed_path; do
        observe "$@"
      done
    done
  fi
}



validate() {
  if [ "$EVENT" = "" ]; then
    echo "error: --event not set" >&2
    exit 1
  fi

  if [ "$SOURCE" = "" ]; then
    if [ "$EVENT" = "delete" ] && [ "$MODE" != "cron" ]; then
      echo "error: --source not set" >&2
      exit 1
    fi
  fi

  if [ "$TARGET" = "" ]; then
    echo "error: --target not set" >&2
    exit 1
  fi

  if [ "$MODE" = "" ]; then
    echo "error: --mode not set" >&2
    exit 1
  elif [ "$MODE" != "git" ] && [ "$MODE" != "ln" ] && [ "$MODE" != "unlink" ] && [ "$MODE" != "cron" ] && [ "$MODE" != "sync" ] && [ "$MODE" != "todo" ]; then
    echo "error: unrecognized mode $MODE" >&2
    exit 1
  fi
}



# @getoptions
parser_definition() {
  setup REST help:usage -- "Usage: observe-dnsmasq-toggle-conf [options]... [arguments]..." ""
  msg -- "Options:"
  flag   DEBUG   -d --debug   -- "debug mode"
  param  EVENT   -e --event   -- "TBD"
  param  FILE    -f --file    -- "observe only a specific file (all files in a directory by default)"
  param  SOURCE  -s --source  -- "TBD"
  param  TARGET  -t --target  -- "target directory to observe (current directory by default)"
  flag   SUDO       --sudo    -- "TBD"
  param  MODE    -m --mode    -- "git, ln, unlink, cron, or sync"
  disp   :usage  -h --help    -- "print help message and exit"
  disp   VERSION    --version -- "show the current version"
}
# @end



# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DEBUG=''
EVENT=''
FILE=''
SOURCE=''
TARGET=''
SUDO=''
MODE=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[efstm]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
        ;;
      -[dh]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '-d'|'--debug')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        DEBUG="$OPTARG"
        ;;
      '-e'|'--event')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        EVENT="$OPTARG"
        shift ;;
      '-f'|'--file')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        FILE="$OPTARG"
        shift ;;
      '-s'|'--source')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        SOURCE="$OPTARG"
        shift ;;
      '-t'|'--target')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        TARGET="$OPTARG"
        shift ;;
      '--sudo')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        SUDO="$OPTARG"
        ;;
      '-m'|'--mode')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        MODE="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: observe-dnsmasq-toggle-conf [options]... [arguments]...

Options:
  -d, --debug                 debug mode
  -e, --event EVENT           TBD
  -f, --file FILE             observe only a specific file (all files in a directory by default)
  -s, --source SOURCE         TBD
  -t, --target TARGET         target directory to observe (current directory by default)
      --sudo                  TBD
  -m, --mode MODE             git, ln, unlink, cron, or sync
  -h, --help                  print help message and exit
      --version               show the current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end



main "$@"
