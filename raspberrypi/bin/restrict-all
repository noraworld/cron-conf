#!/bin/sh

TOGGLE_DIR="/etc/dnsmasq.toggle"
PRIV_TOGGLE_DIR="/etc/dnsmasq.priv/toggle"

main() {
  parse "$@"
  eval "set -- $REST"

  mode="$1"
  services="observe-deregulated-superman-conf observe-deregulated-superman-allow-conf observe-ometeotl-conf observe-superman-conf observe-adguard-upstream-conf observe-nordvpn-upstream-conf observe-vod-conf observe-youtube-conf observe-youtube-alternative-conf observe-youtube-music-conf observe-gaming-conf"

  case "$mode" in
    "check")
      check
      ;;
    "reset")
      reset
      ;;
    *)
      echo "error: no such mode: \"$mode\"" >&2
      exit 1
      ;;
  esac
}

check() {
  if [ -e "$PRIV_TOGGLE_DIR/deregulated_superman.conf"                      ] &&
   ! [ -e "$PRIV_TOGGLE_DIR/deregulated_superman_allow.conf"                ] &&
     [ -e "$PRIV_TOGGLE_DIR/ometeotl.conf"                                  ] &&
     [ -e "$PRIV_TOGGLE_DIR/superman.conf"                                  ] &&
   ! [ -e "$PRIV_TOGGLE_DIR/adguard_upstream.conf"                          ] &&
   ! [ -e "$PRIV_TOGGLE_DIR/cloudflare_upstream.conf"                       ] &&
   ! [ -e "$PRIV_TOGGLE_DIR/nordvpn_upstream.conf"                          ] &&
     [ -e "$PRIV_TOGGLE_DIR/superman_upstream.conf"                         ] &&
     [ -e      "$TOGGLE_DIR/gaming.conf"                                    ] &&
     [ -e      "$TOGGLE_DIR/vod.conf"                                       ] &&
     [ -e      "$TOGGLE_DIR/youtube.conf"                                   ] &&
   ! [ -e      "$TOGGLE_DIR/youtube_alternative.conf"                       ] &&
   ! [ -e      "$TOGGLE_DIR/youtube_music.conf"                             ]; then

    if [ "$STRICT" = 1 ]; then
      if [ "$(systemctl --user is-active $services | grep -c "inactive")" -eq 0 ]; then
        echo 1
      else
        echo -1
      fi
    else
      echo 1
    fi
  else
    echo -1
  fi
}

reset() {
  if [ "$STRICT" = 1 ]; then
    systemctl --user start $services
  fi

  create-dnsmasq-toggle-conf private deregulated_superman       --immediately
  remove-dnsmasq-toggle-conf private deregulated_superman_allow --immediately
  create-dnsmasq-toggle-conf private ometeotl                   --immediately
  create-dnsmasq-toggle-conf private superman                   --immediately
  remove-dnsmasq-toggle-conf private adguard_upstream           --immediately
  remove-dnsmasq-toggle-conf private cloudflare_upstream        --immediately
  remove-dnsmasq-toggle-conf private nordvpn_upstream           --immediately
  create-dnsmasq-toggle-conf private superman_upstream          --immediately
  create-dnsmasq-toggle-conf public gaming                      --immediately
  create-dnsmasq-toggle-conf public vod                         --immediately
  create-dnsmasq-toggle-conf public youtube                     --immediately
  remove-dnsmasq-toggle-conf public youtube_alternative         --immediately
  remove-dnsmasq-toggle-conf public youtube_music               --immediately
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: restrict-all [options]... [arguments]..." ''
  msg -- 'Options:'
  flag    STRICT     --strict  -- "enable strict mode (use the observers)"
  disp    :usage  -h --help    -- "print help message"
  disp    VERSION    --version -- "show current version"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
STRICT=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--strict')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        STRICT="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: restrict-all [options]... [arguments]...

Options:
      --strict                enable strict mode (use the observers)
  -h, --help                  print help message
      --version               show current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
