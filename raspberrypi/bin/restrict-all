#!/bin/sh
# shellcheck disable=SC2004,SC2086

TOGGLE_DIR="/etc/dnsmasq.toggle"
PRIV_TOGGLE_DIR="/etc/dnsmasq.priv/toggle"

main() {
  parse "$@"
  eval "set -- $REST"

  mode="$1"
  shift 1
  services="$@"

  case "$mode" in
    "check")
      check
      ;;
    "reset")
      reset
      ;;
    *)
      echo "error: no such mode: \"$mode\"" >&2
      exit 1
      ;;
  esac
}

check() {
  cond="true"
  for service in $services; do
    if [ "$(build existence $service)" = "true" ]; then
      if ! [ -e "$(build path $service)" ]; then
        cond="false"
        break
      fi
    elif [ "$(build existence $service)" = "false" ]; then
      if [ -e "$(build path $service)" ]; then
        cond="false"
        break
      fi
    fi
  done

  if [ "$cond" = "true" ]; then
    if [ "$STRICT" = 1 ]; then
      if [ "$(systemctl --user is-active $services | grep -c "inactive")" -eq 0 ]; then
        echo 1
      else
        echo -1
      fi
    else
      echo 1
    fi
  else
    echo -1
  fi
}

reset() {
  if [ "$STRICT" = 1 ]; then
    systemctl --user start $services
  fi

  create_public=""
  remove_public=""
  create_private=""
  remove_private=""

  for service in $services; do
    if [ "$(build command $service)" = "create-dnsmasq-toggle-conf public" ]; then
      create_public="$create_public $(build name $service)"
    elif [ "$(build command $service)" = "remove-dnsmasq-toggle-conf public" ]; then
      remove_public="$remove_public $(build name $service)"
    elif [ "$(build command $service)" = "create-dnsmasq-toggle-conf private" ]; then
      create_private="$create_private $(build name $service)"
    elif [ "$(build command $service)" = "remove-dnsmasq-toggle-conf private" ]; then
      remove_private="$remove_private $(build name $service)"
    fi
  done

  [ "$create_public"  != "" ] && create-dnsmasq-toggle-conf public  $create_public  --skip
  [ "$remove_public"  != "" ] && remove-dnsmasq-toggle-conf public  $remove_public  --skip
  [ "$create_private" != "" ] && create-dnsmasq-toggle-conf private $create_private --skip
  [ "$remove_private" != "" ] && remove-dnsmasq-toggle-conf private $remove_private --skip

  # NOTE:
  #   Actually, it should be avoided to restart the daemon directly here.
  #   But we have no choice but to do so because the daemon sometimes fails
  #   when the "--immediately" option is specified to each command above.
  #   On top of that, restarting the Dnsmasq daemon is not executed
  #   without the "--immediately" option for some reason,
  #   even though it is performed in a current shell.

  sudo systemctl restart dnsmasq
}

build() {
  case "$2" in
    "observe-deregulated-superman-conf")
      [ "$1" = "existence" ] && echo "true"
      [ "$1" = "path"      ] && echo "$PRIV_TOGGLE_DIR/deregulated_superman.conf"
      [ "$1" = "command"   ] && echo "create-dnsmasq-toggle-conf private"
      [ "$1" = "name"      ] && echo "deregulated_superman"
      ;;
    "observe-deregulated-superman-allow-conf")
      [ "$1" = "existence" ] && echo "false"
      [ "$1" = "path"      ] && echo "$PRIV_TOGGLE_DIR/deregulated_superman_allow.conf"
      [ "$1" = "command"   ] && echo "remove-dnsmasq-toggle-conf private"
      [ "$1" = "name"      ] && echo "deregulated_superman_allow"
      ;;
    "observe-maeve-conf")
      [ "$1" = "existence" ] && echo "true"
      [ "$1" = "path"      ] && echo "$PRIV_TOGGLE_DIR/maeve.conf"
      [ "$1" = "command"   ] && echo "create-dnsmasq-toggle-conf private"
      [ "$1" = "name"      ] && echo "maeve"
      ;;
    "observe-ometeotl-conf")
      [ "$1" = "existence" ] && echo "true"
      [ "$1" = "path"      ] && echo "$PRIV_TOGGLE_DIR/ometeotl.conf"
      [ "$1" = "command"   ] && echo "create-dnsmasq-toggle-conf private"
      [ "$1" = "name"      ] && echo "ometeotl"
      ;;
    "observe-superman-conf")
      [ "$1" = "existence" ] && echo "true"
      [ "$1" = "path"      ] && echo "$PRIV_TOGGLE_DIR/superman.conf"
      [ "$1" = "command"   ] && echo "create-dnsmasq-toggle-conf private"
      [ "$1" = "name"      ] && echo "superman"
      ;;
    "observe-adguard-upstream-conf")
      [ "$1" = "existence" ] && echo "false"
      [ "$1" = "path"      ] && echo "$PRIV_TOGGLE_DIR/adguard_upstream.conf"
      [ "$1" = "command"   ] && echo "remove-dnsmasq-toggle-conf private"
      [ "$1" = "name"      ] && echo "adguard_upstream"
      ;;
    "observe-cloudflare-upstream-conf")
      [ "$1" = "existence" ] && echo "false"
      [ "$1" = "path"      ] && echo "$PRIV_TOGGLE_DIR/cloudflare_upstream.conf"
      [ "$1" = "command"   ] && echo "remove-dnsmasq-toggle-conf private"
      [ "$1" = "name"      ] && echo "cloudflare_upstream"
      ;;
    "observe-nordvpn-upstream-conf")
      [ "$1" = "existence" ] && echo "false"
      [ "$1" = "path"      ] && echo "$PRIV_TOGGLE_DIR/nordvpn_upstream.conf"
      [ "$1" = "command"   ] && echo "remove-dnsmasq-toggle-conf private"
      [ "$1" = "name"      ] && echo "nordvpn_upstream"
      ;;
    "observe-superman-upstream-conf")
      [ "$1" = "existence" ] && echo "true"
      [ "$1" = "path"      ] && echo "$PRIV_TOGGLE_DIR/superman_upstream.conf"
      [ "$1" = "command"   ] && echo "create-dnsmasq-toggle-conf private"
      [ "$1" = "name"      ] && echo "superman_upstream"
      ;;
    "observe-vod-conf")
      [ "$1" = "existence" ] && echo "true"
      [ "$1" = "path"      ] && echo "$TOGGLE_DIR/vod.conf"
      [ "$1" = "command"   ] && echo "create-dnsmasq-toggle-conf public"
      [ "$1" = "name"      ] && echo "vod"
      ;;
    "observe-youtube-conf")
      [ "$1" = "existence" ] && echo "true"
      [ "$1" = "path"      ] && echo "$TOGGLE_DIR/youtube.conf"
      [ "$1" = "command"   ] && echo "create-dnsmasq-toggle-conf public"
      [ "$1" = "name"      ] && echo "youtube"
      ;;
    "observe-gaming-conf")
      [ "$1" = "existence" ] && echo "true"
      [ "$1" = "path"      ] && echo "$TOGGLE_DIR/gaming.conf"
      [ "$1" = "command"   ] && echo "create-dnsmasq-toggle-conf public"
      [ "$1" = "name"      ] && echo "gaming"
      ;;
    "observe-youtube-alternative-conf")
      [ "$1" = "existence" ] && echo "false"
      [ "$1" = "path"      ] && echo "$TOGGLE_DIR/youtube_alternative.conf"
      [ "$1" = "command"   ] && echo "remove-dnsmasq-toggle-conf public"
      [ "$1" = "name"      ] && echo "youtube_alternative"
      ;;
    "observe-youtube-music-conf")
      [ "$1" = "existence" ] && echo "false"
      [ "$1" = "path"      ] && echo "$TOGGLE_DIR/youtube_music.conf"
      [ "$1" = "command"   ] && echo "remove-dnsmasq-toggle-conf public"
      [ "$1" = "name"      ] && echo "youtube_music"
      ;;
  esac
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: restrict-all [options]... [arguments]..." ''
  msg -- 'Options:'
  flag    STRICT     --strict  -- "enable strict mode (use the observers)"
  disp    :usage  -h --help    -- "print help message"
  disp    VERSION    --version -- "show current version"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
STRICT=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--strict')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        STRICT="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: restrict-all [options]... [arguments]...

Options:
      --strict                enable strict mode (use the observers)
  -h, --help                  print help message
      --version               show current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
